/*
 * Copyright (c) 2005 by the University of California, Irvine
 * All Rights Reserved.
 * 
 * This software is released under the terms of the RTZen license, which
 * you should have received along with this software. If not, you may
 * obtain a copy here: http://zen.ece.uci.edu/rtzen/license.php
 */


package edu.uci.ece.zen.orb;
//
import org.omg.CORBA.*;
import edu.uci.ece.zen.utils.*;


/**
 * TypeCode Methods and implementation that is used when minimal CORBA
 * support of ValueTypes is required.  This file is used in
 * conjunction with TypeCode.java in order to provide the minimal
 * level of support for TypeCodes used in minimal CORBA spec, and this
 * file provides some alternative implementations of the minimalist
 * methods that appear in TypeCodeMinimalAspect.java.  TypeCodes also
 * make use of a file called TypeCode.java which contains methods
 * common to both the full and the minimal implementations of
 * typecodes.
 *
 * <p> TypeCodes and many of the methods related to them are described
 * in section 10.7.1 of the CORBA V2.3 spec, pages 10-50 through
 * 10-53.
 *
 * @see TypeCode, TypeCodeMinimalAspect
 * @author Mark Panahi, Bruce Miller
 */

public privileged aspect TypeCodeAspect {

    // We don't have a pluggable any cache for RTZen.
    /** A public pluggable any cache instace.  It is required that the
     * pluggableAnyCache be created with a reference to the orb
     * somewhere. 
     */
    //    public edu.uci.ece.zen.orb.any.pluggable.PluggableAnyCache pluggableAnyCache = 
    //  new PluggableAnyCache(edu.uci.ece.zen.orb.ORB.ORB_CORE);



//Introductions to CDRInputStream

    //Introductions to ORBSingleton
/*
    This is actually covered my the create_any() above
    
    public Any org.omg.CORBA.ORBSingleton.create_any() {
        // This method has to be implemented.
        return new edu.uci.ece.zen.orb.any.Any(this);
        //throw new org.omg.CORBA.NO_IMPLEMENT();
    }    
*/
/*
    
    //These are temporary since the corresponding classes are not generated by the IDL compiler.
    public static org.omg.CORBA.TypeCode org.omg.CORBA.SystemExceptionHelper._type = org.omg.CORBA.ORB.init().create_exception_tc( org.omg.CORBA.SystemExceptionHelper.id(),"SystemException",new org.omg.CORBA.StructMember[]{new org.omg.CORBA.StructMember("minor",org.omg.CORBA.ORB.init().get_primitive_tc(org.omg.CORBA.TCKind.from_int(5)),null),new org.omg.CORBA.StructMember("completed",org.omg.CORBA.ORB.init().create_enum_tc(org.omg.CORBA.CompletionStatusHelper.id(),"CompletionStatus",new String[]{"COMPLETED_YES","COMPLETED_NO","COMPLETED_MAYBE"}),null)});   
    public static org.omg.CORBA.TypeCode org.omg.CORBA.CompletionStatusHelper._type = org.omg.CORBA.ORB.init().create_enum_tc(org.omg.CORBA.CompletionStatusHelper.id(),"CompletionStatus",new String[]{"COMPLETED_YES","COMPLETED_NO","COMPLETED_MAYBE"});

    before (org.omg.CORBA.ParameterModeHelper obj): target(obj) &&
        initialization(org.omg.CORBA.ParameterModeHelper.new(..) ){

        obj._type = org.omg.CORBA.ORB.init().create_enum_tc(org.omg.CORBA.ParameterModeHelper.id(),"ParameterMode",new String[]{"PARAM_IN","PARAM_OUT","PARAM_INOUT"});
            

    }
*/
}
