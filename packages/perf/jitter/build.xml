<project name="Zen ORB Perf Demo" default="compile" basedir="../../..">

    <property name="package.dir" value="perf/jitter"/>
    <property name="idl.src" value="jitter.idl"/>

	<import file="../../../init.xml"/>
	<import file="../../demo/demo_tasks.xml"/>

    <property name="CORBA.dir" value="${zen.srcdir}/${package.dir}/tao"/>
    <target name="compile">
		<idlc file="${zen.srcdir}/${package.dir}/${idl.src}"/>
		<demo.compile/>
        <jar
            jarfile="${zen.libdir}/perf_world.jar"
            basedir="${zen.classdir}"
            includes="${package.dir}/**"/>
        <antcall target="compile.jrate"/>
        <antcall target="setup_oldzen"/>
    </target>

    <target name="compile.jrate" if="compiler_jRate">
        <demo.compile.jrate main="perf.jitter.Client" out="client">
            <fileset dir="${zen.srcdir}/${package.dir}">
                <include name="Client.java"/>
                <exclude name="Server.java"/>
            </fileset>
            <fileset dir="${zen.gendir}/${package.dir}">
                <include name="*.java"/>
            </fileset>
         </demo.compile.jrate>
    </target>

    <target name="jRate" if="compiler_jRate">
      <taskdef name="jRate" classname="edu.uci.ece.doc.tools.ant.taskdefs.compilers.jRate" classpath="${zen.classpath}" onError="ignore"/>
      <jRate
            optimizeLevel="2"
            libDirs="${zen.jRateLibDir}"
            additionalLinkOptions="-L${zen.libdir} -lZen"
            destdir="${zen.libdir}"
            bootclasspath="${zen.rtbootclasspath}"
            classpath="${jRate_classpath}:${zen.classdir}"
            out="${package.dir}/client"
            main="perf.jitter.Client"
            debug="true">
            <fileset dir="${zen.srcdir}">
                <patternset>
                    <include name="perf/jitter/**.java"/>
                    <exclude name="perf/jitter/Server.java"/>
                </patternset>
            </fileset>
            <fileset dir="${zen.gendir}">
                <patternset>
                    <include name="perf/jitter/**.java"/>
                </patternset>
            </fileset>
       </jRate>
   </target>

    <target name="server">
        <java classname="perf.jitter.Server" fork="yes">
            <jvmarg line="${zen.jvm.properties}"/>
        </java>
    </target> 

    <target name="client">
        <java classname="perf.jitter.Client" fork="yes">
            <jvmarg line="${zen.jvm.properties} -Djava.library.path=/home/hschirne/RTZen/packages/perf/TimeStamp -Xms200M -Xmx500M"/>
        </java>
    </target> 

    <!-- Running this example on old Zen -->
    <!--
    - build old Zen
    - build RTZen with jvm option
    - build this example
    - set "oldzen.home" property below
    - run "setup_oldzen" target, i.e. type "ant setup_oldzen"
    - now you can run the targets below: server_oldzen and client_oldzen
    -->

    <property name="oldzen.home" value="/users/kraman/RTZEN/Zen"/>   

    <target name="setup_oldzen">
    <echo message="antcall setup_oldzen"/>    
      <copy todir="${oldzen.home}/classes">
        <fileset dir="${zen.classdir}">
         <include name="javax/**/*.class"/>
         <include name="perf/**/*.class"/>
         <include name="edu/uci/ece/zen/utils/**/*.class"/>
        </fileset>
      </copy>
    </target>


    <target name="clean">
      <delete dir="${zen.gendir}/${package.dir}"/>
      <delete dir="${zen.classdir}/${package.dir}"/>
      <delete file="${package.dir}/client"/>
      <delete file="${package.dir}/server"/>
      <delete quiet="true" defaultexcludes="no"> 
	     <fileset dir="${package.dir}" includes="*.o"/> 
	     <fileset dir="${package.dir}/tao" includes="*.o"/> 
	     <fileset dir="${package.dir}/tao" includes="jitterC*"/> 
	     <fileset dir="${package.dir}/tao" includes="jitterS*"/> 
      </delete> 
	  <delete file="${package.dir}/tao/server"/>
    </target>


	<target name="compileCORBA">
	
		<property environment="env"/>
		<property name="compile.flags" value="-W -Wall -Wpointer-arith -pipe -D_RENTRANT -DACE_HAS_AIO_CALLS -D_GNU_SOURCE -DACE_NDEBUG -DACE_USE_RCSID=0 -DACE_HAS_EXCEPTIONS"/>
		<property name="compile.args" value="${compile.flags} -I${env.ACE_ROOT}/TAO -I${env.ACE_ROOT} -c -o"/> 
		<property name="link.flags" value="-W -Wall -Wpointer-arith -pipe  -D_REENTRANT -DACE_HAS_AIO_CALLS -D_GNU_SOURCE -Wl,-E -lTAO_PortableServer -lTAO -lACE -ldl -lpthread -lrt"/>
		<property name="link.args" value="${link.flags} -L${env.ACE_ROOT}/ace -L./ -L${env.ACE_ROOT}/TAO -o"/>
	
	    <echo message="${env.ACE_ROOT}/TAO/TAO_IDL/tao_idl"/>
	    <echo message="${CORBA.dir}" />
	    <echo message="${package.dir}"/>

		<exec executable="${env.ACE_ROOT}/TAO/TAO_IDL/tao_idl" dir="${CORBA.dir}">
			<arg line="../jitter.idl"/>
		</exec>

		<exec executable="g++" dir="${CORBA.dir}">
			<arg line="${compile.args} jitterS.o jitterS.cpp"/>
		</exec>
	
		<exec executable="g++" dir="${CORBA.dir}">
			<arg line="${compile.args} jitterS_T.o jitterS_T.cpp"/>
		</exec>
	
		<exec executable="g++" dir="${CORBA.dir}">
			<arg line="${compile.args} jitterC.o jitterC.cpp"/>
		</exec>
	
		<exec executable="g++" dir="${CORBA.dir}">
			<arg line="${compile.args} server.o server.cpp"/>
		</exec>

		<exec executable="g++" dir="${CORBA.dir}">
			<arg line="-I../../TimeStamp ${compile.args} client.o client.cpp"/>
		</exec>

		<exec executable="g++" dir="${CORBA.dir}">
			<arg line="${link.args} server jitterC.o jitterS.o jitterS_T.o server.o"/> 
		</exec>

		<exec executable="g++" dir="${CORBA.dir}">
			<arg line="-L${zen.libdir} -lttimestampjni ${link.args} client jitterC.o client.o"/> 
		</exec>

	</target>

</project>


