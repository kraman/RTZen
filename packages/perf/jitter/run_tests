#!/bin/sh
PROGNAME=$0
SLEEPTIME=5

function printUsage() {
	echo "ERROR: $1"

		echo "$PROGNAME {both|startServer|stopServer|client} [serverType] [clientType]"
		echo "    both        starts client and server"
		echo "    startServer start only the server" 
		echo "    stopServer  only stop the server"
		echo "    client      run muliple tests on the client side"
		echo ""
		echo "    serverType  1  RTZen servant on jRate (Ahead of time RTSJ VM)"
		echo "                10 RTZen servant remote on jRate (Ahead of time RTSJ VM)" 
		echo "                2  TAO servant"
		echo "                20 TAO servant remote"
		echo "                3  JacORB servant on Sun JVM"
		echo "                30 JacORB servant remote on Sun JVM"
		echo "    clientType  1  RTZen client on jRate (Ahead of time RTSJ VM"
		echo "                2  TAO client"
		echo "                3  JacORB client on Sun JVM"

		exit -1;

}

# stoptoken filename (contains the PID)
STOPFNAME=$PROGNAME.stopToken


# startup types 
TESTSIZES="4 32 128 512 1024 4096"
#TESTSIZES="128"
SERVERTYPE=1
CLIENTTYPE=1
TESTTYPE=1


REMNODE="borommir.ece.uci.edu" 
HOST="amras.ece.uci.edu"
# used by startServer and stopServer 
STOPTOKEN=0

# make a good guess about the project home directory
# get the absolute path to current script name
if echo $PROGNAME | egrep '^\/' > /dev/null ; then
	# program started with absolute path name
	ABSPROGNAME="$PROGNAME"
else
	# program started with relative path name
	ABSPROGNAME="`pwd`/$PROGNAME"
fi
# cut off everything after packages
# assume that sed is greedy, so we can handle something like
#  /packages/RTZen/packages/...
PROJECT_HOME="`echo $ABSPROGNAME | sed 's/\(.*\)\/packages.*/\1/'`"

# guess in which directory to execute (needed for the file names)
PROGDIR=`dirname $ABSPROGNAME`


# check if LD_PATH is set to include own lib directory
if echo $LD_LIBRARY_PATH | grep $PROJECT_HOME >> /dev/null; then
	# path is set correctly nothing to be done
	true
else
	export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$PROJECT_HOME/lib"
fi

#set some environment variable for jRate
export JRATE_IMMORTAL_MEMORY_SIZE=300
export JRATE_HEAP_MEMORY_SIZE=200
export JRATE_METHOD_MEMORY_SIZE=500
export JRATE_SCOPES_ARENA_SIZE=300



export JAC_HOME="/usr/share/java/JacORB_2_2_1"

JAC_START="$JAVA_HOME/jre/bin/java -Xbootclasspath/p:$JAC_HOME/lib/jacorb.jar:$PROJECT_HOME/classes:$JAC_HOME/lib/logkit-1.2.jar:$JAC_HOME/lib/avalon-framework-4.1.5.jar -Djacorb.home=$JAC_HOME -Dorg.omg.CORBA.ORBClass=org.jacorb.orb.ORB -Dorg.omg.CORBA.ORBSingletonClass=orb.jacorb.orb.ORBSingleton"


#change to program dir, all filenames are relative
cd $PROGDIR

# startup function for the server
# parameters 
#   type of rt system to start  ( 1 simulated rt, 2 tao, 3 timesys, 30 timesysremote )
function startServer(){
	echo "start server "
		if [ $1 -eq 1 ]; then
                # start RTZen servant on jRate
			EXEC_CMD="./server $1"
				echo "Exec cmd:"
				echo $EXEC_CMD
				$EXEC_CMD&
				echo $! > $STOPFNAME

		elif [ $1 -eq 10 ]; then
                # start RTZen servant remote on jRate
				EXEC_CMD="ssh $REMNODE $PROGDIR/run_tests startServer 1 $1"
				echo "Exec cmd:"
				echo $EXEC_CMD
				$EXEC_CMD&
				sleep $SLEEPTIME
				EXEC_CMD2="scp $REMNODE:`pwd`/ior.txt ."
				$EXEC_CMD2&
				echo $! > $STOPFNAME

		elif [ $1 -eq 2 ]; then
				HOST_IP=`host -t A $HOST | grep -v alias | awk ' { print $4 }'`
                # TAO Servant
				EXEC_CMD="tao_linux/server -ORBListenEndpoints iiop://1.2@$HOST_IP/hostname_in_ior=$HOST_IP"
				echo "Exec cmd:"
				echo $EXEC_CMD
				$EXEC_CMD&
				echo $! > $STOPFNAME
	        elif [ $1 -eq 20 ]; then
                #TAO Servant on $REMNODE
				EXEC_CMD="ssh $REMNODE $PROGDIR/run_tests startServer 2 $1"
				echo "Exec cmd:"
				echo $EXEC_CMD
				$EXEC_CMD&
				sleep $SLEEPTIME
				EXEC_CMD2="scp $REMNODE:`pwd`/ior.txt ."
				$EXEC_CMD2&
		                echo $! > $STOPFNAME	

		elif [ $1 -eq 3 ]; then
                # JacORB server in regular jvm
		                EXEC_CMD="$JAC_START perf.jitter.Server $1"
                   		echo "Exec cmd:"
                    		echo $EXEC_CMD
                		$EXEC_CMD&
	                	echo $! > $STOPFNAME

		elif [ $1 -eq 30 ]; then
                # start JacORB server remote in regular jvm
		                EXEC_CMD="ssh $REMNODE $PROGDIR/run_tests startServer 3 $1"
                  		echo "Exec cmd:"
	                	echo $EXEC_CMD
	                     	$EXEC_CMD&
                                sleep $SLEEPTIME
                                EXEC_CMD2="scp $REMNODE:`pwd`/ior.txt ."
                                $EXEC_CMD2&
                                echo $! > $STOPFNAME
           	else
                printUsage "startServer, unknown server type '$1'"
                fi
}


# stop a previously started server
#   type of rt system to start  ( 1 simulated rt, 2 timesys, 3 ovm )
function stopServer(){
	echo "stop server "

	if [ $1 -eq 1 -o $1 -eq 2 -o $1 -eq 3 ]; then
	
		if [ -f $STOPFNAME ]; then
		
			EXEC_CMD="kill `cat $STOPFNAME`"
			echo "Exec cmd:"
			echo $EXEC_CMD
			$EXEC_CMD
			rm -f $STOPFNAME
                else
                        printUsage "server was not stoped, can not find file '$STOPFNAME'"
                fi
        elif [ $1 -eq 10 ]; then
                EXEC_CMD="ssh $REMNODE $PROGDIR/run_tests stopServer 1 $1"
                echo "Exec cmd:"
                echo $EXEC_CMD
                $EXEC_CMD
                echo $! > $STOPFNAME

        elif [ $1 -eq 20 ]; then
		EXEC_CMD="ssh $REMNODE $PROGDIR/run_tests stopServer 2 $1"
		echo "Exec cmd:"
		echo $EXEC_CMD
		$EXEC_CMD
		echo $! > $STOPFNAME	
       elif [ $1 -eq 30 ]; then
		EXEC_CMD="ssh $REMNODE $PROGDIR/run_tests stopServer 3 $1"
		echo "Exec cmd:"
		echo $EXEC_CMD
		$EXEC_CMD
		echo $! > $STOPFNAME	
       else
             printUsage "unknown server type"
       fi
}

# startup function for the client
# parameters 
#   type of rt system to start  ( 1 RTZen client on jRate, 2 TAO, 3 JacORB client on Sun JVM )
#   type of test (see client.java)
#   number of elements in sequence to be tested 
function startClient(){
	echo "start client "
	if [ $1 -eq 1 ]; then
                EXEC_CMD="./client $2 $3"
                echo "Exec cmd:"
                echo $EXEC_CMD
                $EXEC_CMD
	
	elif [ $1 -eq 2 ]; then
		EXEC_CMD="tao_linux/client -l $3"
		echo "Exec cmd:"
                echo $EXEC_CMD
                $EXEC_CMD
                
        elif [ $1 -eq 3 ]; then
                EXEC_CMD="$JAC_START perf.jitter.Client_jni $2 $3"
                echo "Exec cmd:"
                echo $EXEC_CMD
                $EXEC_CMD
	
        else 
		printUsage "unknown client type '$1'"
	fi
}



###################### MAIN 

# check parameters
if [ $# -eq 0 ]; then
	OPERATION="both"
else
	OPERATION=$1
	if [ $# -eq 1 ]; then
		SERVERTYPE=1
	else
		SERVERTYPE=$2
		if [ $# -eq 2 ]; then
			CLIENTTYPE=1
		else
			CLIENTTYPE=$3
		
		fi
	fi
fi

#printUsage $OPERATION


# either client only or both
if [ $OPERATION == "both" -o $OPERATION == "client" ]; then
	for CURSIZE in $TESTSIZES; do

		# start server only if we should 
		if [ $OPERATION == "both" ]; then
			# startup the server
			startServer $SERVERTYPE
			
			# delay a bit to give the server a chance
			sleep $SLEEPTIME
		fi

		# startup the client (will terminate automatically after finishing)
		startClient $CLIENTTYPE $TESTTYPE $CURSIZE
		
		
		if [ $OPERATION == "both" ]; then
			# stop the server
			stopServer $SERVERTYPE
		fi

		# rename the file
		mv timeRecords.txt timeRecords.raw.$TESTTYPE.$SERVERTYPE.$CLIENTTYPE.$CURSIZE.txt
	
	done
else 
	if [ $OPERATION == "startServer" ]; then
		# check if a server is already started, if so stop the server first 
		#if [ -f $STOPFNAME ]; then
		#	stopServer $SERVERTYPE
		#	sleep 2
		#fi
		startServer $SERVERTYPE
	else
		if [ $OPERATION == "stopServer" ]; then
			stopServer $SERVERTYPE
		else
			printUsage "unknown operation '$OPERATION'"
		fi
	fi
fi

exit
