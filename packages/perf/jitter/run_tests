#!/bin/sh
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/timesys/rtsj-ri/lib/:/opt/timesys/rtsj-ri/pthreadrt
export LD_ASSUME_KERNEL=2.4.1

PROGNAME=$0


function printUsage() {
	echo "ERROR: $1"

	echo "$PROGNAME {both|startServer|stopServer|client} <serverType> [clientType]"
	echo "    both        starts client and server"
	echo "    startServer start only the server" 
	echo "    stopServer  only stop the server"
	echo "    client      run muliple tests on the client side"
	echo ""
	echo "    serverType  1 simulated RT Zen server"
	echo "                2 TAO servant            "

	exit -1;

}


# stoptoken filename (contains the PID)
STOPFNAME=$PROGNAME.stopToken


# startup types 
TESTSIZES="4 32 128 512 2048"
SERVERTYPE=1
CLIENTTYPE=1
TESTTYPE=1

# used by startServer and stopServer 
STOPTOKEN=0

# make a good guess about the project home directory
# get the absolute path to current script name
ABSPROGNAME="`pwd`/$PROGNAME"
# cut off everything after packages
# assume that sed is greedy, so we can handle something like
#  /packages/RTZen/packages/...
PROJECT_HOME="`echo $ABSPROGNAME | sed 's/\(.*\)\/packages.*/\1/'`"

#JAVA_START="$JAVA_HOME/jre/bin/java -Xbootclasspath/p:$PROJECT_HOME/classes:$CLASSPATH:/usr/java/j2sdk1.4.2_01/lib/tools.jar -Dorg.omg.CORBA.ORBClass=edu.uci.ece.zen.orb.ORB -Dorg.omg.CORBA.ORBSingletonClass=edu.uci.ece.zen.orb.ORBSingleton -Dsun.boot.library.path=/usr/java/j2sdk1.4.2_01/jre/lib/i386:$PROJECT_HOME/lib -Xms200M -Xmx500M"
JAVA_START="$JAVA_HOME/jre/bin/java -Xbootclasspath/p:$PROJECT_HOME/classes:$CLASSPATH:/usr/java/j2sdk1.4.2_01/lib/tools.jar -Dorg.omg.CORBA.ORBClass=edu.uci.ece.zen.orb.ORB -Dorg.omg.CORBA.ORBSingletonClass=edu.uci.ece.zen.orb.ORBSingleton -Xms200M -Xmx500M"

TJVM_START="/opt/timesys/rtsj-ri/bin/tjvm -Xverify:all -Ximmortal100M -Xms200M -Djava.class.path=$PROJECT_HOME/classes/ -Djava.library.path=$LD_LIBRARY_PATH -Xbootclasspath=/opt/timesys/rtsj-ri/lib/foundation.jar"


# startup function for the server
# parameters 
#   type of rt system to start  ( 1 simulated rt, 2 tao, 3 timesys )
function startServer(){
	echo "start server "
	if [ $1 -eq 1 ]; then
		# start ZEN server in simulated RT
		EXEC_CMD="$JAVA_START perf.jitter.Server $1"
		echo "Exec cmd:"
		echo $EXEC_CMD
		$EXEC_CMD&
		echo $! > $STOPFNAME
	elif [ $1 -eq 2 ]; then
		HOST_IP=`host -t A doc | awk ' { print $4 }'`
		# TAO SERVANT
		EXEC_CMD="tao/server -ORBListenEndpoints iiop://1.2@$HOST_IP/hostname_in_ior=$HOST_IP"
		echo "Exec cmd:"
		echo $EXEC_CMD
		$EXEC_CMD&
		echo $! > $STOPFNAME
	elif [ $1 -eq 3 ]; then
		# TimeSys JVM
		# start ZEN server in simulated RT
		EXEC_CMD="$TJVM_START perf.jitter.Server $1"
		echo "Exec cmd:"
		echo $EXEC_CMD
		$EXEC_CMD&
		echo $! > $STOPFNAME
	else
		printUsage "startServer, unknown server type '$1'"
	fi
}


# stop a previously started server
#   type of rt system to start  ( 1 simulated rt, 2 timesys, 3 ovm )
function stopServer(){
	echo "stop server "

	if [ $1 -eq 1 -o $1 -eq 2 -o $1 -eq 3 ]; then
	
		if [ -f $STOPFNAME ]; then
		
			# stop for simulated real time
			# start ZEN server in simulated RT
			EXEC_CMD="kill `cat $STOPFNAME`"
			echo "Exec cmd:"
			echo $EXEC_CMD
			$EXEC_CMD
			rm -f $STOPFNAME
		else
			printUsage "server was not started, can not find file '$STOPFNAME'"
		fi
	fi
}

# startup function for the server
# parameters 
#   type of rt system to start  ( 1 simulated rt, 2 timesys, 3 ovm )
#   type of test (see client.java)
#   number of elements in sequence to be tested 
function startClient(){
	echo "start client "
	if [ $1 -eq 1 ]; then
		EXEC_CMD="$JAVA_START perf.jitter.Client $2 $3"
		echo "Exec cmd:"
		echo $EXEC_CMD
		$EXEC_CMD
	elif [ $1 -eq 2 ]; then
		EXEC_CMD="$TJVM_START perf.jitter.Client $2 $3"
		echo "Exec cmd:"
		echo $EXEC_CMD
		$EXEC_CMD
	else 
		printUsage "unknown client type '$1'"
	fi
}



###################### MAIN 

# check parameters
if [ $# -eq 0 ]; then
	OPERATION="both"
else
	OPERATION=$1
	if [ $# -eq 1 ]; then
		SERVERTYPE=1
	else
		SERVERTYPE=$2
		if [ $# -eq 2 ]; then
			CLIENTTYPE=1
		else
			CLIENTTYPE=$3
		
		fi
	fi
fi

#printUsage $OPERATION


# either client only or both
if [ $OPERATION == "both" -o $OPERATION == "client" ]; then
	for CURSIZE in $TESTSIZES; do

		# start server only if we should 
		if [ $OPERATION == "both" ]; then
			# startup the server
			startServer $SERVERTYPE
			
			# delay a bit to give the server a chance
			sleep 5
		fi

		# startup the client (will terminate automatically after finishing)
		startClient $CLIENTTYPE $TESTTYPE $CURSIZE
		
		
		if [ $OPERATION == "both" ]; then
			# stop the server
			stopServer $SERVERTYPE
		fi

		# rename the file
		mv timeRecords.txt timeRecords.$TESTTYPE.$SERVERTYPE.$CLIENTTYPE.$CURSIZE.txt
	
	done
else 
	if [ $OPERATION == "startServer" ]; then
		# check if a server is already started, if so stop the server first 
		if [ -f $STOPFNAME ]; then
			stopServer $SERVERTYPE
			sleep 2
		fi
		startServer $SERVERTYPE
	else
		if [ $OPERATION == "stopServer" ]; then
			stopServer $SERVERTYPE
		else
			printUsage "unknown operation '$OPERATION'"
		fi
	fi
fi

exit
