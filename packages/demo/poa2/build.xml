<project name="POA Policy Demo" default="compile">

    <property name="package.dir" value="demo/poa2"/>
    <property name="idl.src" value="hello.idl"/>
    

    <import file="../../../init.xml"/>
    <import file="../demo_tasks.xml"/>

    <target name="compile">
        <idlc file="${zen.srcdir}/${package.dir}/${idl.src}"/>
        <demo.compile/>
        <!--jar
            jarfile="${zen.libdir}/hello_policies.jar"
            basedir="${zen.classdir}"
            includes="${package.dir}/**"/>
        <antcall target="compile.jrate"/ -->
    </target>

    <!-- target name="compile.jrate" if="compiler_jRate">
        <demo.compile.jrate main="demo.hello.Client" out="client">
            <fileset dir="${zen.srcdir}/${package.dir}">
               <include name="Client.java"/>               
            </fileset>
            <fileset dir="${zen.gendir}/${package.dir}">
                <include name="*.java"/>
            </fileset>
        </demo.compile.jrate>
        <demo.compile.jrate main="demo.hello.Server" out="server">
            <fileset dir="${zen.srcdir}/${package.dir}">
                <include name="Server.java"/>                
                <include name="HelloWorldImpl.java"/>
            </fileset>
            <fileset dir="${zen.gendir}/${package.dir}">
                <include name="*.java"/>
            </fileset>
         </demo.compile.jrate>
    </target -->

    <target name="server">
        <java classname="demo.poa2.Server" fork="yes">
            <jvmarg line="${zen.jvm.properties}"/>
            <!--arg line="-ORBListenEndpoints"/-->
        </java>
    </target>

    <!-- target name="giop_lite_server">
        <java classname="demo.poa.POATestServer" fork="yes">
            <jvmarg line="${zen.jvm.properties}"/>
            <arg line="-ZENLoadProtocoledu.uci.ece.zen.orb.protocol.giop_lite.GLiteMessageFactory"/>
        </java>
    </target -->

    
    <target name="client1">
        <demo.run classname="demo.poa2.Client1"/>
        <arg line="${zen.srcdir}/${package.dir}/ior1.txt"/>
    </target>    
    
    <target name="client2">
        <demo.run classname="demo.poa2.Client2"/>
        <arg line="${zen.srcdir}/${package.dir}/ior2.txt"/>
    </target>       
    
    <!-- set "jacorb.home" properly to use jacorb examples -->
    <!--
    <property name="jacorb.home" value="/project/workarea02/mpanahi/JacORB_2_2"/>
    
    <property name="jacorb.jvmarg" value="-Xbootclasspath/p:${jacorb.home}/lib/jacorb.jar${path.separator}${zen.classdir}${path.separator}${jacorb.home}/lib/logkit-1.2.jar${path.separator}${jacorb.home}/lib/avalon-framework-4.1.5.jar -Djacorb.home=${jacorb.home} -Dorg.omg.CORBA.ORBClass=org.jacorb.orb.ORB -Dorg.omg.CORBA.ORBSingletonClass=orb.jacorb.orb.ORBSingleton"/>    
    
    <target name="server_jacorb">
        <java classname="demo.hello.Server" fork="yes">
             <jvmarg line="${jacorb.jvmarg}"/>
         </java>
    </target>  

     <target name="client_jacorb">
         <java classname="demo.hello.Client" fork="yes">
             <jvmarg line="${jacorb.jvmarg}"/>
         </java>
    </target>
     -->   
    
    
    <!-- Running this example on old Zen -->   
    <!-- 
            - build old Zen
            - build RTZen with jvm option
            - build this example
            - set "oldzen.home" property below
            - run "setup_oldzen" target, i.e. type "ant setup_oldzen"
            - now you can run the targets below: server_oldzen and client_oldzen
    -->    
<!--
    <property name="oldzen.home" value="/project/workarea02/mpanahi/Zen"/>
    
    <property name="oldzen.jvmarg" value="-Xbootclasspath/p:${oldzen.home}/classes -Dorg.omg.CORBA.ORBClass=edu.uci.ece.zen.orb.ORB -Dorg.omg.CORBA.ORBSingletonClass=edu.uci.ece.zen.orb.ORBSingleton"/>    
        
    <target name="setup_oldzen">
      <copy todir="${oldzen.home}/classes">
        <fileset dir="${zen.classdir}">
          <include name="javax/**/*.class"/>
          <include name="demo/**/*.class"/>
          <include name="edu/uci/ece/zen/utils/**/*.class"/>
        </fileset>
      </copy>        
    </target>          
        
    <target name="server_oldzen">
         <java classname="demo.hello.Server" fork="yes">
             <jvmarg line="${oldzen.jvmarg}"/>
         </java>
    </target>  

     <target name="client_oldzen">
         <java classname="demo.hello.Client" fork="yes">
             <jvmarg line="${oldzen.jvmarg}"/>
         </java>
    </target>       
-->
    <target name="clean">
        <demo.clean/>
    </target>

</project>
