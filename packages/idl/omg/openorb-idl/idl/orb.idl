//Updated:  December 1999
//This file contains OMG IDL from  CORBA V2.3 December 1999
//
// OMG IDL/PIDL from Chapters 1 through 15 CORBA module
//
// PIDL is bracketed between #ifdef PIDL .... #endif
// Post CORBA 2.3 changes from core RTF bracketed
// in #ifdef CORBA_2_3_2 ... #endif

#ifndef _ORB_IDL_
#define _ORB_IDL_
#pragma prefix "omg.org"
module CORBA {
// Chapter 3/4 OMG IDL Syntax and Semantics
    const unsigned long OMGVMCID = 0x4f4d0000;
#ifdef PIDL
#define ex_body {unsigned long minor; completion_status completed;}
    enum completion_status {	COMPLETED_YES, 
				COMPLETED_NO, 
				COMPLETED_MAYBE};
    enum exception_type {	NO_EXCEPTION, 
				USER_EXCEPTION, 
				SYSTEM_EXCEPTION};
    exception UNKNOWN 	ex_body;		// the unknown exception
    exception BAD_PARAM	ex_body; 		// an invalid parameter was
						// passed
    exception NO_MEMORY	ex_body; 		// dynamic memory allocation
						// failure	
    exception IMP_LIMIT	ex_body; 		// violated implementation
						// limit
    exception COMM_FAILURE	ex_body; 	// communication failure
    exception INV_OBJREF	ex_body; 	// invalid object reference
    exception NO_PERMISSION	ex_body; 	// no permission for 
						// attempted op.
    exception INTERNAL		ex_body; 	// ORB internal error
    exception MARSHAL		ex_body; 	// error marshaling
						// param/result
    exception INITIALIZE	ex_body; 	// ORB initialization failure
    exception NO_IMPLEMENT	ex_body; 	// operation implementation
 	 					// unavailable
    exception BAD_TYPECODE	ex_body; 	// bad typecode
    exception BAD_OPERATION	ex_body; 	// invalid operation
    exception NO_RESOURCES	ex_body; 	// insufficient resources 
						// for req.
    exception NO_RESPONSE	ex_body; 	// response to req. not yet
						// available
    exception PERSIST_STORE	ex_body; 	// persistent storage failure
    exception BAD_INV_ORDER	ex_body; 	// routine invocations 
						// out of order
    exception TRANSIENT		ex_body; 	// transient failure - reissue
						// request
    exception FREE_MEM		ex_body; 	// cannot free memory
    exception INV_IDENT		ex_body; 	// invalid identifier syntax
    exception INV_FLAG	ex_body; 		// invalid flag was specified
    exception INTF_REPOS	ex_body; 	// error accessing interface
						// repository
    exception BAD_CONTEXT	ex_body; 	// error processing context
						// object
    exception OBJ_ADAPTER	ex_body; 	// failure detected by object
						// adapter
    exception DATA_CONVERSION	ex_body; 	// data conversion error
    exception OBJECT_NOT_EXIST	ex_body; 	// non-existent object,
						// delete reference
    exception TRANSACTION_REQUIRED						
				ex_body; 	// transaction required
    exception TRANSACTION_ROLLEDBACK	
				ex_body; 	// transaction rolled
						// back
    exception INVALID_TRANSACTION 						
				ex_body; 	// invalid transaction
    exception INV_POLICY	ex_body;	// invalid policy
    exception CODESET_INCOMPATIBLE
				ex_body;	// incompatible code set
    exception WrongTransaction {};
#endif // PIDL

// Chapter 4 ORB Interface


#ifdef PIDL
    interface NVList;			// forward declaration
#endif
    interface OperationDef;		// forward declaration

    typedef short PolicyErrorCode;
    // for the definition of consts see "PolicyErrorCode" on page 4-22
#ifdef PIDL
    interface Request;		// forward declaration 
    typedef sequence <Request> RequestSeq; 
#endif
    native AbstractBase;
    #pragma javaNativeMap AbstractBase "java.lang.Object"
    exception PolicyError {PolicyErrorCode reason;};

    typedef string RepositoryId;
    typedef string Identifier;

    // StructMemberSeq defined in Chapter 10
    // UnionMemberSeq defined in Chapter 10
    // EnumMemberSeq defined in Chapter 10

    typedef unsigned short ServiceType;
    typedef unsigned long ServiceOption;
    typedef unsigned long ServiceDetailType;

    const ServiceType Security = 1;

    struct ServiceDetail {
	ServiceDetailType service_detail_type;
	sequence <octet> service_detail;
    };

    struct ServiceInformation {
	sequence <ServiceOption> service_options;
	sequence <ServiceDetail> service_details;
    };

    native ValueFactory;
    #pragma javaNativeMap ValueFactory "org.omg.CORBA.portable.ValueFactory"

#ifdef PIDL
    interface ORB {					// PIDL
#pragma version ORB 2.3

	typedef string ObjectId;
	typedef sequence <ObjectId> ObjectIdList; 

	exception InvalidName {}; 

	string object_to_string (
		in Object 				obj
	);

	Object string_to_object (
		in string				str
	);

	// Dynamic Invocation related operations

	void create_list (
		in long	 				count,	 
		out NVList		 		new_list
	);

	void create_operation_list (	
		in OperationDef 			oper, 
		out NVList 				new_list
	);

	void get_default_context (
		out Context				ctx
	);

	void send_multiple_requests_oneway(
		in RequestSeq 				req
	); 

	void send_multiple_requests_deferred(
		in RequestSeq				req
	); 

	boolean poll_next_response(); 

	void get_next_response(
		out Request				req
	); 

	// Service information operations

	boolean get_service_information (
		in ServiceType service_type,
		out ServiceInformation service_information
	);

	ObjectIdList list_initial_services (); 

	// Initial reference operation

	Object resolve_initial_references (
		in ObjectId 				identifier
	) raises (InvalidName); 

	// Type code creation operations

	TypeCode create_struct_tc (
		in RepositoryId 			id,
		in Identifier 				name,
		in StructMemberSeq 			members
	);

	TypeCode create_union_tc (
		in RepositoryId 			id,
		in Identifier 				name,
		in TypeCode 				discriminator_type,
		in UnionMemberSeq 			members
	);

	TypeCode create_enum_tc (
		in RepositoryId 			id,
		in Identifier 				name,
		in EnumMemberSeq 			members
	);

	TypeCode create_alias_tc (
		in RepositoryId 			id,
		in Identifier 				name,
		in TypeCode 				original_type
	);

	TypeCode create_exception_tc (
		in RepositoryId 			id,
		in Identifier 				name,
		in StructMemberSeq 			members
	);

	TypeCode create_interface_tc (
		in RepositoryId 			id,
		in Identifier 				name
	);

	TypeCode create_string_tc (
		in unsigned long 			bound
	);

	TypeCode create_wstring_tc (
		in unsigned long 			bound
	);

	TypeCode create_fixed_tc (
		in unsigned short 			digits,
		in short 				scale
	);

	TypeCode create_sequence_tc (
		in unsigned long 			bound,
		in TypeCode 				element_type
	);

	TypeCode create_recursive_sequence_tc ( // deprecated
		in unsigned long 			bound,
		in unsigned long 			offset
	);

	TypeCode create_array_tc (
		in unsigned long 			length,
		in TypeCode 				element_type
	);

	TypeCode create_value_tc (
		in RepositoryId				id,
		in Identifier				name,
		in ValueModifier			type_modifier,
		in TypeCode				concrete_base,
		in ValueMemberSeq			members
	);

	TypeCode create_value_box_tc (
		in RepositoryId				id,
		in Identifier				name,
		in TypeCode				boxed_type
	);

	TypeCode create_native_tc (
		in RepositoryId				id,
		in Identifier				name
	);

	TypeCode create_recursive_tc(
		in RepositoryId				id
	);

	TypeCode create_abstract_interface_tc(
		in RepositoryId				id,
		in Identifier				name
	);

	// Thread related operations

	boolean work_pending( );

	void perform_work();

	void run();

	void shutdown(
		in boolean 				wait_for_completion
	);

	void destroy();

	// Policy related operations

	Policy create_policy(
		in PolicyType 				type, 
		in any 					val
	) raises (PolicyError);

	// Dynamic Any related operations deprecated and removed
	// from primary list of ORB operations

	// Value factory operations

	ValueFactory register_value_factory(
		in RepositoryId 			id,
		in ValueFactory 			factory
	);

	void unregister_value_factory(
		in RepositoryId 			id
	);

	ValueFactory lookup_value_factory(
		in RepositoryId 			id
	);

	void send_multiple_requests_oneway(in RequestSeq req); 
	void send_multiple_requests_deferred(in RequestSeq req); 

	// PIDL
	boolean poll_response ( in Request	req); 

	//PIDL 
	void get_response () raises (WrongTransaction);


	interface Request;        	// forward declaration 

	boolean poll_next_response(); 
	void get_next_response(out Request req) raises (WrongTransaction); 
    }; 
#endif // PIDL
    enum SetOverrideType {SET_OVERRIDE, ADD_OVERRIDE};

    interface DomainManager;		// forward declaration
    typedef sequence <DomainManager> DomainManagersList;
    interface Policy;			// forward declaration
    typedef sequence <Policy> PolicyList;
    typedef unsigned long PolicyType;
    typedef sequence <PolicyType> PolicyTypeSeq;
    exception InvalidPolicies{ sequence <unsigned short> indices; };

    local interface PolicyManager{
        PolicyList get_policy_overrides( in PolicyTypeSeq ts );
        void set_policy_overrides( in PolicyList policies ,
        in SetOverrideType set_add ) raises(InvalidPolicies);
    };

#ifdef PIDL
    interface Context;			// forward declaration
    interface Request;			// forward declaration
    interface NVList;			// forward declaration
#endif
    //typedef string Identifier;

    typedef unsigned long Flags;
    struct NamedValue {						
	Identifier	name;		// argument name
	any		argument;	// argument
	long		len;		// length/count of argument value
	Flags		arg_modes;	// argument mode flags
    };

    interface InterfaceDef;

#ifdef PIDL
    interface Object {				// PIDL

	InterfaceDef get_interface ();

	boolean is_nil();

	Object duplicate ();

	void release ();

	boolean is_a (
	    in string		logical_type_id
	);

	boolean non_existent();

	boolean is_equivalent (
	    in Object 		other_object
	);

	unsigned long hash(
	    in unsigned long 	maximum
	);

	void create_request (			
	    in Context		ctx,
	    in Identifier	operation,
	    in NVList		arg_list,
	    inout NamedValue	result,
	    out Request		a_request,
	    in Flags		req_flag
	);

	Policy get_policy (
	    in PolicyType	policy_type
	);

	DomainManagersList get_domain_managers ();

	Object set_policy_overrides(
	    in PolicyList	policies,
	    in SetOverrideType	set_add
	);
    };

    valuetype ValueBase{		
	ValueDef get_value_def();
    };

    typedef string ORBid;
    typedef sequence <string> arg_list;
    ORB ORB_init (inout arg_list argv, in ORBid orb_identifier);
#endif // PIDL


    // interface for the Current object
    local interface Current {};

    local interface PolicyCurrent : PolicyManager, Current{
    };

    // Basic IDL definition
    interface Policy {
	readonly attribute PolicyType policy_type;
	Policy copy();
	void destroy();
    };

    //typedef sequence <Policy> PolicyList;

    // typedef short PolicyErrorCode;
	const PolicyErrorCode BAD_POLICY = 0;
	const PolicyErrorCode UNSUPPORTED_POLICY = 1;
	const PolicyErrorCode BAD_POLICY_TYPE = 2;
	const PolicyErrorCode BAD_POLICY_VALUE = 3;
	const PolicyErrorCode UNSUPPORTED_POLICY_VALUE = 4;

    // exception PolicyError {PolicyErrorCode reason;};


    interface DomainManager {
	Policy get_domain_policy (
	    in PolicyType policy_type
	);
    };

    const PolicyType SecConstruction = 11;

    interface ConstructionPolicy: Policy		{
	void make_domain_manager(
	    in CORBA::InterfaceDef object_type,
	    in boolean constr_policy
	); 
    };

    //typedef sequence <DomainManager> DomainManagersList;


// Chapter 5 Value Type Semantics

    valuetype StringValue string;
    valuetype WStringValue wstring;

    //native ValueFactory;
    abstract valuetype DataOutputStream;
    abstract valuetype DataInputStream;
    
    abstract valuetype CustomMarshal {
	void marshal (in DataOutputStream os);
	void unmarshal (in DataInputStream is);
    };

    typedef sequence<any> AnySeq;
    typedef sequence<string> StringSeq;
    typedef sequence<boolean> BooleanSeq;
    typedef sequence<char> CharSeq;
    typedef sequence<wchar> WCharSeq;
    typedef sequence<octet> OctetSeq;
    typedef sequence<short> ShortSeq;
    typedef sequence<unsigned short> UShortSeq;
    typedef sequence<long> LongSeq;
    typedef sequence<unsigned long> ULongSeq;
    typedef sequence<long long> LongLongSeq;
    typedef sequence<unsigned long long> ULongLongSeq;
    typedef sequence<float> FloatSeq;
    typedef sequence<double> DoubleSeq;
#ifdef CORERTF_2_5
    typedef sequence<long double> LongDoubleSeq;
#endif

    abstract valuetype DataOutputStream {
	void write_any				(in any value);
	void write_boolean			(in boolean value);
	void write_char				(in char value);
	void write_wchar			(in wchar value);
	void write_octet			(in octet value);
	void write_short			(in short value);
	void write_ushort			(in unsigned short value);
	void write_long				(in long value);
	void write_ulong			(in unsigned long value);
	void write_longlong			(in long long value);
	void write_ulonglong			(in unsigned long long value);
	void write_float			(in float value);
	void write_double			(in double value);
	//void write_longdouble			(in long double value);
	void write_string			(in string value);
	void write_wstring			(in wstring value);
	void write_Object			(in Object value);
	void write_Abstract			(in AbstractBase value);
	void write_Value			(in ValueBase value);
	void write_TypeCode			(in TypeCode value);
	void write_any_array(			in AnySeq seq,
						in unsigned long offset,
						in unsigned long length);
	void write_boolean_array(		in BooleanSeq seq,
						in unsigned long offset,
						in unsigned long length);
	void write_char_array(			in CharSeq seq,
						in unsigned long offset,
						in unsigned long length);
	void write_wchar_array(			in WCharSeq seq,
						in unsigned long offset,
						in unsigned long length);
	void write_octet_array(			in OctetSeq seq,
						in unsigned long offset,
						in unsigned long length);
	void write_short_array(			in ShortSeq seq,
						in unsigned long offset,
						in unsigned long length);
	void write_ushort_array(		in UShortSeq seq,
						in unsigned long offset,
						in unsigned long length);
	void write_long_array(			in LongSeq seq,
						in unsigned long offset,
						in unsigned long length);
	void write_ulong_array(			in ULongSeq seq,
						in unsigned long offset,
						in unsigned long length);
	void write_ulonglong_array(		in ULongLongSeq seq,
						in unsigned long offset,
						in unsigned long length);
	void write_longlong_array(		in LongLongSeq seq,
						in unsigned long offset,
						in unsigned long length);
	void write_float_array(			in FloatSeq seq,
						in unsigned long offset,
						in unsigned long length);
	void write_double_array(		in DoubleSeq seq,
						in unsigned long offset,
						in unsigned long length);
#ifdef CORERTF_2_5
	void write_long_double_array(		in LongDoubleSeq seq,
						in unsigned long offset,
						in unsigned long length);
#endif 
    };

    abstract valuetype DataInputStream {
	any read_any();
	boolean read_boolean();
	char read_char();
	wchar read_wchar();
	octet read_octet();
	short read_short();
	unsigned short read_ushort();
	long read_long();
	unsigned long read_ulong();
	long long read_longlong();
	unsigned long long read_ulonglong();
	float read_float();
	double read_double();
	//long double read_longdouble();
	string read_string();
	wstring read_wstring();
	Object read_Object();
	AbstractBase read_Abstract();
	ValueBase read_Value();
	TypeCode read_TypeCode();

	void read_any_array(		inout AnySeq seq,
					in unsigned long offset,
					in unsigned long length);
	void read_boolean_array(	inout BooleanSeq seq,
					in unsigned long offset,
					in unsigned long length);
	void read_char_array(		inout CharSeq seq,
					in unsigned long offset,
					in unsigned long length);
	void read_wchar_array(		inout WCharSeq seq,
					in unsigned long offset,
					in unsigned long length);
	void read_octet_array(		inout OctetSeq seq,
					in unsigned long offset,
					in unsigned long length);
	void read_short_array(		inout ShortSeq seq,
					in unsigned long offset,
					in unsigned long length);
	void read_ushort_array(		inout UShortSeq seq,
					in unsigned long offset,
					in unsigned long length);
	void read_long_array(		inout LongSeq seq,
					in unsigned long offset,
					in unsigned long length);
	void read_ulong_array(		inout ULongSeq seq,
					in unsigned long offset,
					in unsigned long length);
	void read_ulonglong_array(	inout ULongLongSeq seq,
					in unsigned long offset,
					in unsigned long length);
	void read_longlong_array(	inout LongLongSeq seq,
					in unsigned long offset,
					in unsigned long length);
	void read_float_array(		inout FloatSeq seq,
					in unsigned long offset,
					in unsigned long length);
	void read_double_array(		inout DoubleSeq seq,
					in unsigned long offset,
					in unsigned long length);
#ifdef CORERTF_2_5
	void read_long_double_array(	inout LongDoubleSeq seq,
					in unsigned long offset,
					in unsigned long length);
#endif
    };

// Chapter 7 Dynamic Invocation Interface

    //typedef unsigned long Flags;

    //native OpaqueValue;
#ifdef PIDL
    interface Request {			// PIDL

	void add_arg (
	    in Identifier	name,	// argument name
 	    in TypeCode 	arg_type,// argument datatype
	    in OpaqueValue	value,	// argument value to be added
	    in long	 	len,	// length/count of argument value
	    in Flags	 	arg_flags// argument flags
	);

	void invoke (
	    in Flags		invoke_flags// invocation flags
	);

	void delete ();

	void send (
	    in Flags		invoke_flags// invocation flags 
	);

	void get_response () raises (WrongTransaction);

	boolean poll_response(); 
    };

    interface NVList {				// PIDL
	void add_item (
	    in Identifier	item_name,	// name of item
	    in TypeCode		item_type,	// item datatype
	    in OpaqueValue	value,		// item value
	    in long		value_len,	// length of item value
	    in Flags	 	item_flags	// item flags
	);
	void free ( );
	void free_memory ( );			
	void get_count (				
	    out long		 count	// number of entries in the list
	);
    };

    interface Context {				// PIDL
	void set_one_value (
	    in Identifier 	prop_name,// property name to add
	    in string	 	value	// property value to add
	);
	void set_values (
	    in NVList		values	// property values to be changed
	);
	void get_values (
	    in Identifier 	start_scope,// search scope
	    in Flags	 	op_flags,// operation flags
	    in Identifier 	prop_name,// name of property(s) to retrieve
	    out NVList	 	values	// requested property(s)
	);
	void delete_values (
	    in Identifier	prop_name // name of property(s) to delete
	);
	void create_child (
	    in Identifier	ctx_name, // name of context object
	    out Context 	child_ctx // newly created context object
	);
	void delete (
	    in Flags	 	del_flags // flags controlling deletion
	);
	void get_response()
	    raises(WrongTransaction);
	boolean poll_response();
#ifdef CORBA3
	Object sendp();
	void prepare(in Object p);
	void sendc(in Object handler);
#endif // CORBA3
    };

// Chapter 8 Dynamic Skeleton Interface

    interface ServerRequest {
	readonly attribute Identifier operation;
	void arguments (
	    inout NVList	nv
	);
	Context ctf();
	void set_result (
	    in any		val
	);
	void set_exception (
	    in any		val
	);
    };
#endif // PIDL

// Chapter 10 Interface Repository

    //typedef string Identifier;
    typedef string ScopedName;
    //typedef string RepositoryId;
    enum DefinitionKind {
#	pragma version DefinitionKind 2.3
	dk_none, dk_all,
	dk_Attribute, dk_Constant, dk_Exception, dk_Interface,
	dk_Module, dk_Operation, dk_Typedef,
	dk_Alias, dk_Struct, dk_Union, dk_Enum,
	dk_Primitive, dk_String, dk_Sequence, dk_Array,
	dk_Repository,
	dk_Wstring, dk_Fixed,
	dk_Value, dk_ValueBox, dk_ValueMember,
	dk_Native,
	dk_Interface_2_3
    };
    interface IRObject {
#	pragma version IRObject 2.3
	// read interface
	readonly attribute DefinitionKind def_kind;
	// write interface
	void destroy ();
    };
    typedef string VersionSpec;
    interface Contained;
    interface Repository;
    interface Container;
    interface Contained : IRObject {
#	pragma version Contained 2.3

	// read/write interface
	attribute RepositoryId id;
	attribute Identifier name;
	attribute VersionSpec version;
	// read interface
	readonly attribute Container defined_in;
	readonly attribute ScopedName absolute_name;
	readonly attribute Repository containing_repository;
	struct Description {
	    DefinitionKind kind;
	    any value; 
	}; 
	Description describe ();
	// write interface
	void move (
	    in Container 		new_container,
	    in Identifier 		new_name,
	    in VersionSpec 		new_version
	);
    };
    interface ModuleDef;
    interface ConstantDef;
    interface IDLType;
    interface StructDef;
    interface UnionDef;
    interface EnumDef;
    interface AliasDef;
    //interface InterfaceDef;
    interface ExceptionDef;
    interface NativeDef;
    typedef sequence <InterfaceDef> InterfaceDefSeq;
    interface ValueDef;
    typedef sequence <ValueDef> ValueDefSeq;
    interface ValueBoxDef;
    typedef sequence <Contained> ContainedSeq;
    struct StructMember {
	Identifier 				name;
	TypeCode 				type;
	IDLType 				type_def;
    };
    typedef sequence <StructMember> StructMemberSeq;
    struct Initializer {
#	pragma version Initializer 2.3
	StructMemberSeq 			members;
	Identifier				name;
    };
    typedef sequence <Initializer> InitializerSeq;
    struct UnionMember {
	Identifier 				name;
	any 					label;
	TypeCode 				type;
	IDLType 				type_def;
    };
    typedef sequence <UnionMember> UnionMemberSeq;
    typedef sequence <Identifier> EnumMemberSeq;
    interface InterfaceDef_2_3; //foward declaration
    interface Container : IRObject {
#	pragma version Container 2.3
	// read interface
	Contained lookup (
	    in ScopedName 			search_name
	);
	ContainedSeq contents (
	    in DefinitionKind 			limit_type,
	    in boolean 				exclude_inherited
	);
	ContainedSeq lookup_name (
	    in Identifier 			search_name, 
	    in long 				levels_to_search, 
	    in DefinitionKind 			limit_type,
	    in boolean 				exclude_inherited
	);
	struct Description {
	    Contained 				contained_object; 
	    DefinitionKind 			kind;
	    any 				value; 
	};
	typedef sequence<Description> DescriptionSeq;
	DescriptionSeq describe_contents (
	    in DefinitionKind 			limit_type,
	    in boolean 				exclude_inherited,
	    in long 				max_returned_objs
	);
	// write interface
	ModuleDef create_module (
	    in RepositoryId 			id,
	    in Identifier 			name,
	    in VersionSpec 			version
	);
	ConstantDef create_constant (
	    in RepositoryId 			id,
	    in Identifier 			name,
	    in VersionSpec 			version,
	    in IDLType 				type,
	    in any 				value
	);
	StructDef create_struct (
	    in RepositoryId 			id,
	    in Identifier 			name,
	    in VersionSpec 			version,
	    in StructMemberSeq 			members
	);
	UnionDef create_union (
	    in RepositoryId 			id,
	    in Identifier 			name,
	    in VersionSpec 			version,
	    in IDLType 				discriminator_type,
	    in UnionMemberSeq 			members
	);
	EnumDef create_enum (
	    in RepositoryId 			id,
	    in Identifier 			name,
	    in VersionSpec 			version,
	    in EnumMemberSeq			members
	);
	AliasDef create_alias (
	    in RepositoryId 			id,
	    in Identifier 			name,
	    in VersionSpec 			version,
	    in IDLType 				original_type
	);
	InterfaceDef create_interface (
	    in RepositoryId 			id,
	    in Identifier 			name,
	    in VersionSpec 			version,
	    in InterfaceDefSeq	 		base_interfaces
	);
	ValueDef create_value(
	    in RepositoryId			id,
	    in Identifier			name,
	    in VersionSpec			version,
	    in boolean				is_custom,
	    in boolean				is_abstract,
	    in ValueDef				base_value,
	    in boolean				is_truncatable,
	    in ValueDefSeq			abstract_base_values,
	    in InterfaceDefSeq			supported_interfaces,
	    in InitializerSeq			initializers
	);
	ValueBoxDef create_value_box(
	    in RepositoryId 			id,
	    in Identifier 			name,
	    in VersionSpec 			version,
	    in IDLType 				original_type_def
	);
	ExceptionDef create_exception(
	    in RepositoryId 			id,
	    in Identifier 			name,
	    in VersionSpec 			version,
	    in StructMemberSeq 			members
	);
	NativeDef create_native(
	    in RepositoryId 			id,
	    in Identifier 			name,
	    in VersionSpec 			version
	);
	InterfaceDef_2_3 create_interface_2_3 (
	    in RepositoryId id,
	    in Identifier name,
	    in VersionSpec version,
	    in InterfaceDefSeq base_interfaces,
	    in boolean is_abstract
	);
    };

    interface IDLType : IRObject {
#	pragma version IDLType 2.3
	readonly attribute TypeCode 	type;
    };
	
    interface PrimitiveDef;
    interface StringDef;
    interface SequenceDef;
    interface ArrayDef;
    interface WstringDef;
    interface FixedDef;
    enum PrimitiveKind {
#	pragma version PrimitiveKind 2.3
	pk_null, pk_void, pk_short, pk_long, pk_ushort, pk_ulong,
	pk_float, pk_double, pk_boolean, pk_char, pk_octet,
	pk_any, pk_TypeCode, pk_Principal, pk_string, pk_objref,
	pk_longlong, pk_ulonglong, pk_longdouble, 
	pk_wchar, pk_wstring, pk_value_base
    };
	
    interface Repository : Container {
#	pragma version Repository 2.3
	// read interface
	Contained lookup_id (in RepositoryId search_id);
	TypeCode get_canonical_typecode(in TypeCode tc); 
	PrimitiveDef get_primitive (in PrimitiveKind kind);
	// write interface
	StringDef create_string (in unsigned long bound);
	WstringDef create_wstring (in unsigned long bound);
	SequenceDef create_sequence (
	    in unsigned long 		bound,
	    in IDLType 			element_type
	 );
	ArrayDef create_array (
	    in unsigned long 		length,
	    in IDLType 			element_type
	);
	FixedDef create_fixed (
	    in unsigned short 		digits,
	    in short 			scale
	);
    };

    interface ModuleDef : Container, Contained {
#	pragma version ModuleDef 2.3
    };

    struct ModuleDescription {
	Identifier 			name; 
	RepositoryId 			id; 
	RepositoryId 			defined_in;
	VersionSpec 			version;
    };
	
    interface ConstantDef : Contained {
#	pragma version ConstantDef 2.3
	readonly attribute TypeCode type;
	attribute IDLType type_def;
	attribute any value;
    };
	
    struct ConstantDescription {
	Identifier 			name; 
	RepositoryId 			id; 
	RepositoryId 			defined_in; 
	VersionSpec 			version;
	TypeCode 			type; 
	any 				value; 
    };
	
    interface TypedefDef : Contained, IDLType {
#	pragma version TypedefDef 2.3
	
    };
	
    struct TypeDescription {
	Identifier 			name; 
	RepositoryId 			id; 
	RepositoryId 			defined_in; 
	VersionSpec 			version;
	TypeCode 			type; 
    };
	
    interface StructDef : TypedefDef, Container {
#	pragma version StructDef 2.3
	attribute StructMemberSeq 	members;
    };
	
    interface UnionDef : TypedefDef, Container {
#	pragma version UnionDef 2.3
	readonly attribute TypeCode 	discriminator_type;
	attribute IDLType 		discriminator_type_def;
	attribute UnionMemberSeq 	members;
    };

    interface EnumDef : TypedefDef {
#	pragma version EnumDef 2.3
	attribute EnumMemberSeq 	members;
    };
	
    interface AliasDef : TypedefDef {
#	pragma version AliasDef 2.3
	attribute IDLType 		original_type_def;
    };

    interface NativeDef : TypedefDef {
#	pragma version NativeDef 2.3
    };

    interface PrimitiveDef: IDLType {
#	pragma version PrimitiveDef 2.3
	readonly attribute PrimitiveKind kind;
    };
	
    interface StringDef : IDLType {
#	pragma version StringDef 2.3
	attribute unsigned long 	bound;
    };
	
    interface WstringDef : IDLType {
#	pragma version WstringDef 2.3
	attribute unsigned long 	bound;
    };

    interface FixedDef : IDLType {
#	pragma version FixedDef 2.3
	attribute unsigned short 	digits;
	attribute short 		scale;
    };

    interface SequenceDef : IDLType {
#	pragma version SequenceDef 2.3
	attribute unsigned long 	bound;
	readonly attribute TypeCode 	element_type;
	attribute IDLType 		element_type_def;
    };

    interface ArrayDef : IDLType {
#	pragma version ArrayDef 2.3
	attribute unsigned long 	length;
	readonly attribute TypeCode 	element_type;
	attribute IDLType 		element_type_def;
    };

    interface ExceptionDef : Contained, Container {
#	pragma version ExceptionDef 2.3
	readonly attribute TypeCode 	type;
	attribute StructMemberSeq 	members;
    };
	
    struct ExceptionDescription {
	Identifier 			name; 
	RepositoryId 			id; 
	RepositoryId 			defined_in; 
	VersionSpec 			version;
	TypeCode 			type; 
    };
	
    enum AttributeMode {ATTR_NORMAL, ATTR_READONLY};
	
    interface AttributeDef : Contained {
#	pragma version AttributeDef 2.3
	readonly attribute TypeCode 	type;
	attribute IDLType	 	type_def;
	attribute AttributeMode		mode;
    };
	
    struct AttributeDescription {
	Identifier 			name; 
	RepositoryId 			id; 
	RepositoryId 			defined_in; 
	VersionSpec 			version;
	TypeCode 			type;
	AttributeMode 			mode; 
    };
	
    enum OperationMode {OP_NORMAL, OP_ONEWAY};
    enum ParameterMode {PARAM_IN, PARAM_OUT, PARAM_INOUT};
    struct ParameterDescription {
	Identifier 			name; 
	TypeCode 			type; 
	IDLType 			type_def;
	ParameterMode 			mode;
    };
 
    typedef sequence <ParameterDescription> ParDescriptionSeq;
    typedef Identifier ContextIdentifier;
    typedef sequence <ContextIdentifier> ContextIdSeq;
    typedef sequence <ExceptionDef> ExceptionDefSeq;
    typedef sequence <ExceptionDescription> ExcDescriptionSeq;

    interface OperationDef : Contained {
#	pragma version OperationDef 2.3
	readonly attribute TypeCode	result;
	attribute IDLType 		result_def;
	attribute ParDescriptionSeq 	params;
	attribute OperationMode 	mode; 
	attribute ContextIdSeq 		contexts;
	attribute ExceptionDefSeq 	exceptions;
    };

    struct OperationDescription {
	Identifier 			name; 
	RepositoryId 			id; 
	RepositoryId 			defined_in; 
	VersionSpec 			version;
	TypeCode 			result; 
	OperationMode 			mode; 
	ContextIdSeq 			contexts; 
	ParDescriptionSeq 		parameters;
	ExcDescriptionSeq 		exceptions;
    };
	
    typedef sequence <RepositoryId> RepositoryIdSeq;
    typedef sequence <OperationDescription> OpDescriptionSeq;
    typedef sequence <AttributeDescription> AttrDescriptionSeq;

    interface InterfaceDef : Container, Contained, IDLType {
#	pragma version InterfaceDef 2.3
	// read/write interface
	attribute InterfaceDefSeq 	base_interfaces;
	attribute boolean		is_abstract;
	// read interface
	boolean is_a (
	    in RepositoryId 		interface_id
	);
	struct FullInterfaceDescription {
#	    pragma version FullInterfaceDescription 2.3
	    Identifier 			name;
	    RepositoryId		id;
	    RepositoryId 		defined_in;
	    VersionSpec 		version;
	    OpDescriptionSeq 		operations;
	    AttrDescriptionSeq 		attributes;
	    RepositoryIdSeq 		base_interfaces;
	    TypeCode 			type;
	};
	FullInterfaceDescription describe_interface();
	// write interface
	AttributeDef create_attribute (
	    in RepositoryId 		id,
	    in Identifier 		name,
	    in VersionSpec 		version,
	    in IDLType 			type,
	    in AttributeMode 		mode
	);
	OperationDef create_operation (
   	    in RepositoryId 		id,
	    in Identifier 		name,
	    in VersionSpec 		version,
	    in IDLType 			result,
	    in OperationMode 		mode, 
	    in ParDescriptionSeq 	params,
	    in ExceptionDefSeq 		exceptions,
	    in ContextIdSeq 		contexts
	);
    };
	
    struct InterfaceDescription {
#	pragma version InterfaceDescription 2.3
	Identifier 			name; 
	RepositoryId 			id; 
	RepositoryId 			defined_in; 
	VersionSpec 			version;
	RepositoryIdSeq 		base_interfaces;
    };

    typedef short Visibility;
    const Visibility PRIVATE_MEMBER = 0;
    const Visibility PUBLIC_MEMBER = 1;

    struct ValueMember {
#	pragma version ValueMember 2.3
	Identifier 			name;
	RepositoryId 			id;
	RepositoryId 			defined_in;
	VersionSpec 			version;
	TypeCode 			type;
	IDLType 			type_def;
	Visibility 			access; 
    };

    typedef sequence <ValueMember> ValueMemberSeq;

    interface ValueMemberDef : Contained {
#	pragma version ValueMemberDef 2.3
	readonly attribute TypeCode type;
	attribute IDLType type_def;
	attribute Visibility access;
    };
	
    interface ValueDef : Container, Contained, IDLType {
#	pragma version ValueDef 2.3
	// read/write interface
	attribute InterfaceDefSeq supported_interfaces;
	attribute InitializerSeq initializers;
	attribute ValueDef base_value;
	attribute ValueDefSeq abstract_base_values;
	attribute boolean is_abstract;
	attribute boolean is_custom;
	attribute boolean is_truncatable;
	// read interface
	boolean is_a(
	    in RepositoryId 		id
	);
	struct FullValueDescription {
#	    pragma version FullValueDescription 2.3
	    Identifier			name;
	    RepositoryId		id;
	    boolean			is_abstract;
	    boolean			is_custom;
	    RepositoryId		defined_in;
	    VersionSpec			version;
	    OpDescriptionSeq		operations;
	    AttrDescriptionSeq		attributes;
	    ValueMemberSeq		members;
	    InitializerSeq		initializers;
	    RepositoryIdSeq		supported_interfaces;
	    RepositoryIdSeq		abstract_base_values;
	    boolean			is_truncatable;
	    RepositoryId		base_value;
	    TypeCode			type;
	};
	FullValueDescription describe_value();
	ValueMemberDef create_value_member(
	    in RepositoryId 		id,
	    in Identifier 		name,
	    in VersionSpec 		version,
	    in IDLType 			type,
	    in Visibility 		access
	);
	AttributeDef create_attribute(
	    in RepositoryId		id,
	    in Identifier		name,
	    in VersionSpec		version,
	    in IDLType			type,
	    in AttributeMode		mode
	);
	OperationDef create_operation (
	    in RepositoryId		id,
	    in Identifier		name,
	    in VersionSpec		version,
	    in IDLType			result,
	    in OperationMode		mode,
	    in ParDescriptionSeq	params,
	    in ExceptionDefSeq		exceptions,
	    in ContextIdSeq		contexts
	);
    };
    struct ValueDescription {
#	pragma version ValueDescription 2.3
	Identifier			name;
	RepositoryId			id;
	boolean 			is_abstract;
	boolean				is_custom;
	RepositoryId			defined_in;
	VersionSpec			version;
	RepositoryIdSeq			supported_interfaces;
	RepositoryIdSeq			abstract_base_values;
	boolean				is_truncatable;
	RepositoryId			base_value; 
    };
	
    interface ValueBoxDef : TypedefDef {
#	pragma version ValueBoxDef 2.3
	attribute IDLType original_type_def;
    };
	
    interface InterfaceDef_2_3 : InterfaceDef {
#	pragma version InterfaceDef_2_3 2.3
	//attribute boolean is_abstract;
	struct FullInterfaceDescription_2_3 {
#	    pragma version FullInterfaceDescription_2_3 2.3
	    Identifier 			name;
	    RepositoryId		id;
	    RepositoryId 		defined_in;
	    VersionSpec 		version;
	    OpDescriptionSeq 		operations;
	    AttrDescriptionSeq 		attributes;
	    RepositoryIdSeq 		base_interfaces;
	    TypeCode 			type;
	    boolean			is_abstract;
	};
	FullInterfaceDescription_2_3 describe_interface_2_3();
    };
    struct InterfaceDescription_2_3 {
#	pragma version InterfaceDescription_2_3 2.3
	Identifier 			name; 
	RepositoryId 			id; 
	RepositoryId 			defined_in; 
	VersionSpec 			version;
	RepositoryIdSeq 		base_interfaces;
	boolean				is_abstract;
    };


    enum TCKind {				
#	pragma version TCKind 2.3
	tk_null, tk_void, 
	tk_short, tk_long, tk_ushort, tk_ulong, 
	tk_float, tk_double, tk_boolean, tk_char, 
	tk_octet, tk_any, tk_TypeCode, tk_Principal, tk_objref, 
	tk_struct, tk_union, tk_enum, tk_string, 
	tk_sequence, tk_array, tk_alias, tk_except,
	tk_longlong, tk_ulonglong, tk_longdouble,
	tk_wchar, tk_wstring, tk_fixed,
	tk_value, tk_value_box,
	tk_native,
	tk_abstract_interface
    };
	
    typedef short ValueModifier;	
	const ValueModifier VM_NONE = 0;
	const ValueModifier VM_CUSTOM = 1;
	const ValueModifier VM_ABSTRACT = 2;
	const ValueModifier VM_TRUNCATABLE = 3;

#ifdef PIDL
    interface TypeCode {	// special marshaling rules
				// see Chapter 15
#	pragma version TypeCode 2.3
	exception Bounds {};
	exception BadKind {};
	// for all TypeCode kinds
	boolean equal (in TypeCode tc);
	boolean equivalent(in TypeCode tc); 
	TypeCode get_compact_typecode(); 
	TCKind kind ();
	// for tk_objref, tk_struct, tk_union, tk_enum, tk_alias, 
	// tk_value, tk_value_box, tk_native, tk_abstract_interface
	// and tk_except
	RepositoryId id () raises (BadKind);
	// for tk_objref, tk_struct, tk_union, tk_enum, tk_alias, 
	// tk_value, tk_value_box, tk_native, tk_abstract_interface
	// and tk_except
	Identifier name () raises (BadKind);
	// for tk_struct, tk_union, tk_enum, tk_value, 
	// and tk_except
	unsigned long member_count () raises (BadKind);
	Identifier member_name (in unsigned long index) 
		raises (BadKind, Bounds);
	// for tk_struct, tk_union, tk_value, and tk_except
	TypeCode member_type (in unsigned long index) 
		raises (BadKind, Bounds);
	// for tk_union
	any member_label (in unsigned long index) 
		raises (BadKind, Bounds);
	TypeCode discriminator_type () raises (BadKind);
	long default_index () raises (BadKind); 
	// for tk_string, tk_sequence, and tk_array
	unsigned long length () raises (BadKind);
	// for tk_sequence, tk_array, tk_value_box, and tk_alias
	TypeCode content_type () raises (BadKind);
	// for tk_fixed
	unsigned short fixed_digits() raises (BadKind);
	short fixed_scale() raises (BadKind);
	// for tk_value
	Visibility member_visibility(in unsigned long index)
		raises(BadKind, Bounds);
	ValueModifier type_modifier() raises(BadKind);
	TypeCode concrete_base_type() raises(BadKind);
    };
#endif // PIDL
};
#endif // _ORB_IDL_
