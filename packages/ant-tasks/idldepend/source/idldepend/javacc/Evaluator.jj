/**
  * File: Evaluator.jj
  * Author: LuisM Pena, luismpena@gmx.net
  * Last update: 0.30, 1st July 2003
  * Please visit http://grasia.fdi.ucm.es/~luismi/idldepend for
  *   updates, download, license and copyright information
  **/

options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(Evaluator)

package idldepend.javacc.generated;

import java.io.StringReader;

public class Evaluator {

  public Evaluator(String toEvaluate){
    this(new StringReader(toEvaluate));
  }

  public boolean evaluate() throws ParseException{
    return evaluateInput();
  }

  private boolean toBoolean(int n) {
    return n!=0;
  }

  private int toInt(boolean b) {
    return b? 1 : 0;
  }

}

PARSER_END(Evaluator)

SKIP :
{
     <"\t">
   | < " ">
}

TOKEN :
{
   <NUMBER    : (("0x") (["0"-"9"])+ | (["0"-"9"])+ ("U" | "L" | "UL" | "LU" | "u" | "l" | "ul" | "lu")?)>
 | <DEFINED   : "defined">
 | <ID        : ["a"-"z","A"-"Z","_"] (["a"-"z","A"-"Z","0"-"9","_"])*>
 | <ORLOGICAL : "||">
 | <ANDLOGICAL: "&&">
 | <ORBINARY  : "|">
 | <NOTBINARY : "^">
 | <ANDBINARY : "&">
 | <EQUAL     : "==">
 | <NOTEQUAL  : "!=">
 | <NOTGREATER: "<=">
 | <MINOR     : "<">
 | <NOTMINOR  : ">=">
 | <GREATER   : ">">
 | <SHIFTLEFT : "<<">
 | <SHIFTRIGHT: ">>">
 | <ADD       : "+">
 | <SUBST     : "-">
 | <MULT      : "*">
 | <DIV       : "/">
 | <MODULE    : "%">
 | <NEG       : "~">
 | <NOT       : "!">
}

boolean evaluateInput() :
{
  int n;
}
{
  n=prec0() <EOF> {return n!=0;}
}


int prec0() :
{
  int ret, tmp;
}
{
    ret=prec1()
    (
      (<ORLOGICAL> tmp=prec1()  {ret=toInt(toBoolean(ret)||toBoolean(tmp));} )*
    )
    {return ret;}
}

int prec1() :
{
  int ret, tmp;
}
{
    ret=prec2()
    (
      (<ANDLOGICAL> tmp=prec2()  {ret=toInt(toBoolean(ret)&&toBoolean(tmp));} )*
    )
    {return ret;}
}

int prec2() :
{
  int n1, n2;
}
{
    n1=prec3()
    (
      (<ORBINARY> n2=prec3()  {n1|=n2;} )*
    )
    {return n1;}
}

int prec3() :
{
  int n1, n2;
}
{
    n1=prec4()
    (
      (<NOTBINARY> n2=prec4()  {n1^=n2;} )*
    )
    {return n1;}
}

int prec4() :
{
  int n1, n2;
}
{
    n1=prec5()
    (
      (<ANDBINARY> n2=prec5()  {n1&=n2;} )*
    )
    {return n1;}
}

int prec5() :
{
  int ret, tmp;
}
{
    ret=prec6()
    (
      (<EQUAL>    tmp=prec6()  {ret=toInt(ret==tmp);} )+
    | (<NOTEQUAL> tmp=prec6()  {ret=toInt(ret!=tmp);} )*
    )
    {return ret;}
}

int prec6() :
{
  int ret, tmp;
}
{
    ret=prec7()
    (
      (<NOTGREATER> tmp=prec7()  {ret=toInt(ret<=tmp);} )+
    | (<MINOR>      tmp=prec7()  {ret=toInt(ret<tmp);}  )+
    | (<NOTMINOR>   tmp=prec7()  {ret=toInt(ret>=tmp);} )+
    | (<GREATER>    tmp=prec7()  {ret=toInt(ret>tmp);}  )*
    )
    {return ret;}
}

int prec7() :
{
  int ret, tmp;
}
{
    ret=prec8()
    (
      (<SHIFTLEFT>  tmp=prec8()  {ret<<=tmp;} )+
    | (<SHIFTRIGHT> tmp=prec8()  {ret>>=tmp;} )*
    )
    {return ret;}
}

int prec8() :
{
  int ret,tmp;
}
{
    ret=prec9()
    (
      (<ADD>   tmp=prec9()  {ret+=tmp;} )+
    | (<SUBST> tmp=prec9()  {ret-=tmp;} )*
    )
    {return ret;}
}

int prec9() :
{
  int ret,tmp;
}
{
    ret=prec10()
    (
      (<MULT>   tmp=prec10()  {ret*=tmp;} )+
    | (<DIV>    tmp=prec10()  {ret/=tmp;} )+
    | (<MODULE> tmp=prec10()  {ret%=tmp;} )*
    )
    {return ret;}
}

int prec10() :
{
  int ret;
}
{
    ret=prec11()  {return ret;}
    | (<NEG> ret=prec11()) {return ~ret;}
}

int prec11() :
{
  int ret;
}
{
    ret=prec12()  {return ret;}
    | (<NOT> ret=prec12())  {return toInt(!toBoolean(ret));}
}

int prec12() :
{
  int ret;
}
{
    ret=prec13()  {return ret;}
    | (<SUBST> ret=prec13())  {return -ret;}
}

int prec13() :
{
  int ret;
}
{
    ret=number()  {return ret;}
    | (<DEFINED> "(" ret=prec0() ")")  {return toInt(toBoolean(ret));}
    | ("(" ret=prec0() ")")  {return ret;}
}

int number() :
{
  Token n;
}
{
  n=<NUMBER>
  {
    String number = n.toString();
    if (number.startsWith("0x")) {
      return Integer.parseInt(number.substring(2),16);
    }
    if (number.endsWith("L") || number.endsWith("l")) {
      number=number.substring(0,number.length()-1);
    }
    if (number.endsWith("U") || number.endsWith("u")) {
      number=number.substring(0,number.length()-1);
    }
    return Integer.parseInt(number);
  }
  | <ID> {return 0;}
}

