/** 
  * File: IDLParser.jj
  * Author: LuisM Pena, luismpena@gmx.net
  * Last update: 0.61, 29th June 2004
  * Please visit http://grasia.fdi.ucm.es/~luismi/idldepend for
  *   updates, download, license and copyright information
  **/

options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(IDLParser)

package idldepend.javacc.generated;

import idldepend.idl.IDLToJavaMapping;
import idldepend.javacc.LocatedParseException;

import java.io.Reader;
import java.util.HashMap;

/**
 * Changes on the jj file included with the JavaCC 2.1 distribution,
 * to reflect the changes on CORBA 2.3.
 * Note that this parser receives content already preprocessed, where
 * every comment has been removed.
 * Line information is received through lines with the following format:
 * #line number file
 * It accepts as well lines #pragma, but it discards all of them but #pragma prefix
 */
public class IDLParser {

  public IDLParser(Reader reader, IDLToJavaMapping mapper) {
    this(reader);
    this.mapper=mapper;
  }

  public void parse() throws ParseException{
    addParser(token_source, this);
    try {
      specification();
    }
    catch(ParseException ex) {
      if (lineFile==null) {
        throw ex;
      }
      else {
        int lineError =token.next.beginLine+lineLine-line-1;
        throw new LocatedParseException(ex, lineFile, lineError);
      }
    }
    finally{
      removeParser(token_source);
    }
  }

  final static private int PRIMITIVE = 0;
  final static private int SEQUENCE = 1;
  final static private int NO_PRIMITIVE = 2;
  final static private int NO_TYPEDEF = 3;

  /**
   * It is needed to keep track of the right line and file being parsed.
   */
  public void lineDirective(String directive, int thoughtLine) {
    line=thoughtLine;
    int space=directive.indexOf(" ",6);
    lineLine=Integer.valueOf(directive.substring(6,space)).intValue();
    lineFile=directive.substring(space+1);
    mapper.prefixPragma((String) prefixes.get(lineFile));
  }

  public void linePragma(String directive) {
    String withoutPragma = directive.substring(7).trim();
    if (withoutPragma.startsWith("prefix")) {
      String prefix=withoutPragma.substring(6).trim();
      int length=prefix.length();
      if (length>1 && prefix.charAt(0)=='"' && prefix.charAt(length-1)=='"') {
        prefix=prefix.substring(1,length-1);
      }
      else {
        prefix=null;
      }
      prefixes.put(lineFile, prefix);
      mapper.prefixPragma(prefix);
    }
  }

  private IDLToJavaMapping mapper;
  private HashMap prefixes = new HashMap();
  private int line;
  private int lineLine;    //information extracted from #line directives
  private String lineFile; //information extracted from #line directives

  /**
   * Following variables/methods are required to map
   * IDLParserTokenManagers and IDLParsers, which is needed
   * if static generation is not used on the JavaCC generation.
   * (The IDLParserTokenManager needs to communicate to the
   * IDLParser on #line and #pragma directives, but the
   * IDLParserTokenManager has no knowledge on the IDLParser to
   * use!
   */
  static private HashMap IDLParsers = new HashMap();
  static IDLParser getParser(IDLParserTokenManager m )
    {return (IDLParser) IDLParsers.get(m);}
  static void addParser(IDLParserTokenManager m, IDLParser parser)
    {IDLParsers.put(m, parser);}
  static void removeParser(IDLParserTokenManager m)
    {IDLParsers.remove(m);}

}

PARSER_END(IDLParser)


/*
 * Tokens to ignore in the BNF follow.
 */

SKIP :
{
  < " " >
| < "\t" >
| < "\n" >
| < "\r" >
| < "#pragma" (~["\n","\r"])*>
  {IDLParser.getParser(this).linePragma(image.toString());}
| < "#line" (~["\n","\r"])*>
  {IDLParser.getParser(this).lineDirective(image.toString(), input_stream.getEndLine());}
}

/* Production 1. Changed from definition+ to definition* !!! */
/* This production must be changed to support "import" */

void specification() :
{}
{
  ( definition() )* <EOF>
}

/* Production 2 */
/* Thi sproduction must change to support type_id, type_prefix, event, component, home_decl */

void definition() :
{}
{
  type_dcl() ";"
|
  const_dcl() ";"
|
  except_dcl() ";"
|
  LOOKAHEAD(2)
  interfacex() ";"
|
  module() ";"
|
  value() ";"
}

/* Production 3 */

void module() :
{
  String name;
}
{
  "module"
  name=identifier()
      {mapper.enteredScope(name,true);}
  "{" ( definition() )+ "}"
      {mapper.exitedScope();}
}

/* Production 4 */

void interfacex() :
{}
{
  LOOKAHEAD(4)
  interface_dcl()
|
  forward_dcl()
}

/* Production 5 */

void interface_dcl() :
{
  String name;
}
{
  name=interface_header()     {mapper.enteredScope(name,false);}
  "{" interface_body() "}"    {mapper.exitedScope();}
}

/* Production 6 */
/* Changed to support local interfaces */

void forward_dcl() :
{}
{
  [ "abstract" | "local" ] "interface" identifier()
}

/* Production 7 */
/* Changed to support local interfaces */
/* Changed to support pseudo interfaces */

String interface_header() :
{
  String name;
  boolean abst=false, local=false, pseudo=false;
}
{
  [ "abstract"  {abst=true;} | "local" {local=true;} | "pseudo" {pseudo=true;}]
  "interface" name = identifier() [ inheritance_spec() ]
    {
      if (pseudo) mapper.mapPseudoInterface(name);
      else mapper.mapInterface(name, abst, local);
      return name;
    }
}

/* Production 8 */

void interface_body() :
{}
{
  ( export() )*
}

/* Production 9 */
/* Production 9 must change to support type_id & type_prefix */

void export() :
{}
{
  type_dcl() ";"
|
  const_dcl() ";"
|
  except_dcl() ";"
|
  attr_dcl() ";"
|
  op_dcl() ";"
}

/* Production 10 */

void inheritance_spec() :
{}
{
  ":" interface_name() ( "," interface_name() )*
}

/* Production 11 */

void interface_name() :
{}
{
  scoped_name()
}

/* Production 12 */

void scoped_name() :
{}
{
  [ "::" ] identifier() ( "::" identifier() )*
}

/* Production 13 */

void value() :
{
}
{
  LOOKAHEAD(3)
  value_dcl()
|
  LOOKAHEAD(3)
  value_abs_dcl()
|
  LOOKAHEAD(3)
  value_box_dcl()
|
  value_forward_dcl()
}

/* Production 14 */

void value_forward_dcl() :
{
}
{
  [ "abstract" ] "valuetype" identifier()
}

/* Production 15 */

void value_box_dcl() :
{
  String name;
  int type;
}
{
  "valuetype" name=identifier() type=type_spec()
  {mapper.mapValuebox(name, type==PRIMITIVE);}
}

/* Production 16 */

void value_abs_dcl() :
{
  String name;
}
{
  "abstract" "valuetype"
  name = identifier() value_inheritance_spec()
  {
    mapper.mapValuetype(name, false);
    mapper.enteredScope(name, false);
  }
  "{" ( export() )* "}"
  {
    mapper.exitedScope();
  }
}

/* Production 17 */

void value_dcl() :
{
  String name;
  boolean withFactory=false, thisOne;
}
{
  name=value_header()
  {
    mapper.enteredScope(name, false);
  }
 "{" ( thisOne=value_element() {withFactory|=thisOne;})* "}"
  {
    mapper.exitedScope();
    mapper.mapValuetype(name, withFactory);
  }
}

/* Production 18 */

String value_header() :
{
  String name;
}
{
  [ "custom" ] "valuetype" name=identifier() value_inheritance_spec()
  {
    return name;
  }
}

/* Production 19 */

void value_inheritance_spec() :
{
}
{
  [ ":" [ "truncatable" ] value_name() ( "," value_name() )* ]
  [ "supports" interface_name() ( "," interface_name() )* ]
}

/* Production 20 */

void value_name() :
{
}
{
  scoped_name()
}

/* Production 21 : returns true if it includes a factory*/

boolean value_element() :
{
}
{
    export()       {return false;}
  | state_member() {return false;}
  | init_dcl()     {return true;}
}

/* Production 22 */

void state_member() :
{
}
{
  ( "public" | "private" ) type_spec() declarators(NO_TYPEDEF) ";"
}

/* Production 23 */
/* must change to support [<raises_expr>] */

void init_dcl() :
{
}
{
  "factory" identifier() "(" [ init_param_decls() ] ")" ";"
}

/* Production 24 */

void init_param_decls() :
{
}
{
  init_param_decl() ( "," init_param_decl() )*
}

/* Production 25 */

void init_param_decl() :
{
}
{
  init_param_attribute() param_type_spec() simple_declarator()
}

/* Production 26 */

void init_param_attribute() :
{
}
{
  "in"
}

/* Production 27 */

void const_dcl() :
{
  String name;
}
{
  "const" const_type() name=identifier() "=" const_exp() {mapper.mapConst(name);}
}

/* Production 28 */

void const_type() :
{}
{
  LOOKAHEAD(2)
  integer_type()
|
  char_type()
|
  wide_char_type()
|
  boolean_type()
|
  floating_pt_type()
|
  string_type()
|
  wide_string_type()
|
  fixed_pt_const_type()
|
  scoped_name()
|
  octet_type()
}

/* Production 29 */

void const_exp() :
{}
{
  or_expr()
}

/* Production 30 */

void or_expr() :
{}
{
  xor_expr() ( "|" xor_expr() )*
}

/* Production 31 */

void xor_expr() :
{}
{
  and_expr() ( "^" and_expr() )*
}

/* Production 32 */

void and_expr() :
{}
{
  shift_expr() ( "&" shift_expr() )*
}

/* Production 33 */

void shift_expr() :
{}
{
  add_expr() ( ( ">>" | "<<" ) add_expr() )*
}

/* Production 34 */

void add_expr() :
{}
{
  mult_expr() ( ( "+" | "-" ) mult_expr() )*
}

/* Production 35 */

void mult_expr() :
{}
{
  unary_expr() ( ( "*" | "/" | "%" ) unary_expr() )*
}

/* Production 36 */

void unary_expr() :
{}
{
  [ unary_operator() ] primary_expr()
}

/* Production 37 */
void unary_operator() :
{}
{
  "-"
|
  "+"
|
  "~"
}

/* Production 38 */

void primary_expr() :
{}
{
  scoped_name()
|
  literal()
|
  "(" const_exp() ")"
}

/* Production 39 */

void literal() :
{}
{
  integer_literal()
|
  string_literal()
|
  wide_string_literal()
|
  character_literal()
|
  wide_character_literal()
|
  fixed_pt_literal()
|
  floating_pt_literal()
|
  boolean_literal()
}

/* Production 40 */

void boolean_literal() :
{}
{
  "TRUE"
|
  "FALSE"
}

/* Production 41 */

void positive_int_const() :
{}
{
  const_exp()
}

/* Production 42 */
/* This production must change to support constr_forward_decl */

void type_dcl() :
{}
{
  "typedef" type_declarator()
|
  struct_type()
|
  union_type()
|
  enum_type()
|
  "native" simple_declarator()
}

/* Production 43 */

void type_declarator() :
{
  int type;
}
{
  type=type_spec() declarators(type)
}

/* Production 44 */

int type_spec() :
{
  int ret;
}
{
  ret=simple_type_spec() {return ret;}
|
  constr_type_spec()     {return NO_PRIMITIVE;}
}

/* Production 45 */

int simple_type_spec() :
{
  int ret;
}
{
  ret=base_type_spec()      {return ret;}
|
  ret=template_type_spec()  {return ret;}
|
  scoped_name()             {return NO_PRIMITIVE;}
}

/* Production 46 */

int base_type_spec() :
{}
{
  LOOKAHEAD(2)
  floating_pt_type() {return PRIMITIVE;}
|
  integer_type()     {return PRIMITIVE;}
|
  char_type()        {return PRIMITIVE;}
|
  wide_char_type()   {return PRIMITIVE;}
|
  boolean_type()     {return PRIMITIVE;}
|
  octet_type()       {return PRIMITIVE;}
|
  any_type()         {return NO_PRIMITIVE;}
|
  object_type()      {return NO_PRIMITIVE;}
|
  value_base_type()  {return NO_PRIMITIVE;}
}

/* Production 47 */

int template_type_spec() :
{}
{
  sequence_type()    {return SEQUENCE;}
|
  string_type()      {return NO_PRIMITIVE;}
|
  wide_string_type() {return NO_PRIMITIVE;}
|
  fixed_pt_type()    {return NO_PRIMITIVE;}
}

/* Production 48 */

void constr_type_spec() :
{}
{
  struct_type()
|
  union_type()
|
  enum_type()
}

/* Production 49 */

void declarators(int type) :
{}
{
  declarator(type) ( "," declarator(type) )*
}

/* Production 50 */

void declarator(int type) :
{
  String name;
}
{
  LOOKAHEAD(2)
  name=complex_declarator()
      {if (type!=NO_TYPEDEF) mapper.mapTypedef(name,true);} //(array)
|
  name=simple_declarator()
      {if (type!=NO_TYPEDEF) mapper.mapTypedef(name,type==SEQUENCE);}
}

/* Production 51 */

String simple_declarator() :
{
  String ret;
}
{
  ret=identifier() {return ret;}
}

/* Production 52 */

String complex_declarator() :
{
  String name;
}
{
  name=array_declarator() {return name;}
}

/* Production 53 */

void floating_pt_type() :
{}
{
  "float"
|
  "double"
|
  "long" "double"
}

/* Production 54 */

void integer_type() :
{}
{
  signed_int()
|
  unsigned_int()
}

/* Production 55 */

void signed_int() :
{}
{
  signed_short_int()
|
  LOOKAHEAD(2)
  signed_longlong_int()
|
  signed_long_int()
}

/* Production 56 */

void signed_short_int() :
{}
{
  "short"
}

/* Production 57 */

void signed_long_int() :
{}
{
  "long"
}

/* Production 58 */

void signed_longlong_int() :
{}
{
  "long" "long"
}

/* Production 59 */

void unsigned_int() :
{}
{
  LOOKAHEAD(2)
  unsigned_short_int()
|
  LOOKAHEAD(3)
  unsigned_longlong_int()
|
  unsigned_long_int()
}

/* Production 60 */

void unsigned_short_int() :
{}
{
  "unsigned" "short"
}

/* Production 61 */

void unsigned_long_int() :
{}
{
  "unsigned" "long"
}

/* Production 62 */

void unsigned_longlong_int() :
{}
{
  "unsigned" "long" "long"
}

/* Production 63 */

void char_type() :
{}
{
  "char"
}

/* Production 64 */

void wide_char_type() :
{}
{
  "wchar"
}

/* Production 65 */

void boolean_type() :
{}
{
  "boolean"
}

/* Production 66 */

void octet_type() :
{}
{
  "octet"
}

/* Production 67 */

void any_type() :
{}
{
  "any"
}

/* Production 68 */

void object_type() :
{}
{
  "Object"
}

/* Production 69 */

void struct_type() :
{
  String name;
}
{
  "struct" name=identifier() "{" member_list() "}" {mapper.mapStruct(name);}
}

/* Production 70 */

void member_list() :
{}
{
  ( member() )+
}

/* Production 71 */

void member() :
{}
{
  type_spec() declarators(NO_TYPEDEF) ";"
}

/* Production 72 */

void union_type() :
{
  String name;
}
{
  "union" name=identifier()
    "switch" "(" switch_type_spec() ")" "{" switch_body() "}"

   {mapper.mapUnion(name);}
}

/* Production 73 */

void switch_type_spec() :
{}
{
  integer_type()
|
  char_type()
|
  boolean_type()
|
  enum_type()
|
  scoped_name()
}

/* Production 74 */

void switch_body() :
{}
{
  ( casex() )+
}

/* Production 75 */

void casex() :
{}
{
  ( case_label() )+ element_spec() ";"
}

/* Production 76 */

void case_label() :
{}
{
  "case" const_exp() ":"
|
  "default" ":"
}

/* Production 77 */

void element_spec() :
{}
{
  type_spec() declarator(NO_TYPEDEF)
}

/* Production 78 */

void enum_type() :
{
  String name;
}
{
  "enum" name=identifier() "{" enumerator() ( "," enumerator() )* "}"

  {mapper.mapEnum(name);}
}

/* Production 79 */

void enumerator() :
{}
{
  identifier()
}

/* Production 80 */

void sequence_type() :
{}
{
  "sequence" "<" simple_type_spec() [ "," positive_int_const() ] ">"
}

/* Production 81 */

void string_type() :
{}
{
  "string" [ "<" positive_int_const() ">" ]
}

/* Production 82 */

void wide_string_type() :
{}
{
  "wstring" [ "<" positive_int_const() ">" ]
}

/* Production 83 */

String array_declarator() :
{
  String name;
}
{
  name=identifier() ( fixed_array_size() )+ {return name;}
}

/* Production 84 */

void fixed_array_size() :
{}
{
  "[" positive_int_const() "]"
}

/* Production 85 */
/* Production 85 must change to support attribute access exceptions */

void attr_dcl() :
{}
{
  [ "readonly" ] "attribute" param_type_spec() simple_declarator()
    ( "," simple_declarator() )*
}

/* Production 86 */

void except_dcl() :
{
  String name;
}
{
  "exception" name=identifier() "{" ( member() )* "}" {mapper.mapException(name);}
}

/* Production 87 */

void op_dcl() :
{}
{
  [ op_attribute() ] op_type_spec() identifier() parameter_dcls()
  [ raises_expr() ] [ context_expr() ]
}

/* Production 88 */

void op_attribute() :
{}
{
  "oneway"
}

/* Production 89 */

void op_type_spec() :
{}
{
  param_type_spec()
|
  "void"
}

/* Production 90 */

void parameter_dcls() :
{}
{
  "(" [ param_dcl() ( "," param_dcl() )* ] ")"
}

/* Production 91 */

void param_dcl() :
{}
{
  param_attribute() param_type_spec() simple_declarator()
}

/* Production 92 */

void param_attribute() :
{}
{
  "in"
|
  "out"
|
  "inout"
}

/* Production 93 */

void raises_expr() :
{}
{
  "raises" "(" scoped_name() ( "," scoped_name() )* ")"
}

/* Production 94 */

void context_expr() :
{}
{
  "context" "(" string_literal() ( "," string_literal() )* ")"
}

/* Production 95 */

void param_type_spec() :
{}
{
  base_type_spec()
|
  string_type()
|
  wide_string_type()
|
  scoped_name()
}

/* Production 96 */

void fixed_pt_type() :
{}
{
  "fixed" "<" positive_int_const() "," positive_int_const() ">"
}

/* Production 97 */

void fixed_pt_const_type() :
{}
{
  "fixed"
}

/* Production 98 */

void value_base_type() :
{}
{
  "ValueBase"
}

/************************** END OF GRAMMAR PRODUCTIONS *******************************/

/* Definitions of complex regular expressions follow */

String identifier() :
{
  Token token;
}
{
  token=<ID> {return token.toString();}
}

void integer_literal() :
{}
{
  <OCTALINT>
|
  <DECIMALINT>
|
  <HEXADECIMALINT>
}

void string_literal() :
{}
{
  <STRING>
}

void wide_string_literal() :
{}
{
  <WSTRING>
}

void character_literal() :
{}
{
  <CHARACTER>
}

void wide_character_literal() :
{}
{
  <WCHARACTER>
}

void floating_pt_literal() :
{}
{
  <FLOATONE>
|
  <FLOATTWO>
}

void fixed_pt_literal() :
{}
{
  <FIXED>
}

TOKEN :
{
  <  ID : ["a"-"z","A"-"Z", "_"] (["a"-"z","A"-"Z","0"-"9","_"])* >
| <  OCTALINT : "0" (["0"-"7"])* (["u","U","l","L"])? >
| <  DECIMALINT : ["1"-"9"] (["0"-"9"])* (["u","U","l","L"])? >
| <  HEXADECIMALINT : ("0x"|"0X") (["0"-"9","a"-"f","A"-"F"])+ (["u","U","l","L"])? >
| <  FIXED : ((["0"-"9"])+ (".")? (["0"-"9"])* | (["0"-"9"])* (".")? (["0"-"9"])+)
   ( "d" | "D" )>
| <  FLOATONE : ((["0"-"9"])+ "." (["0"-"9"])* | (["0"-"9"])* "." (["0"-"9"])+)
   (["e","E"] (["-","+"])? (["0"-"9"])+)? (["f","F","l","L"])? >
| <  FLOATTWO : (["0"-"9"])+ ["e","E"] (["-","+"])?
   (["0"-"9"])+ (["f","F","l","L"])? >
| <  WCHARACTER : "L" "'"
   (   (~["'","\\","\n","\r"])
   | ("\\" (
             ["n","t","v","b","r","f","a","\\","?","'","\""]
            |
             "0" (["0"-"7"])*
            |
             ["1"-"9"] (["0"-"9"])*
            |
             ("0x" | "0X") (["0"-"9","a"-"f","A"-"F"])+
            |
             "u" (["0"-"9","a"-"f","A"-"F"])+
           )
     )
   )
   "'" >
| <  CHARACTER : "'"
   (   (~["'","\\","\n","\r"])
   | ("\\" (
             ["n","t","v","b","r","f","a","\\","?","'","\""]
            |
             "0" (["0"-"7"])*
            |
             ["1"-"9"] (["0"-"9"])*
            |
             ("0x" | "0X") (["0"-"9","a"-"f","A"-"F"])+
           )
     )
   )
   "'" >
| < WSTRING : "L" "\""
   ( ( ~["\"","\\","\n","\r"])
   | ("\\" (
             ["n","t","v","b","r","f","a","\\","?","'","\""]
            |
             "0" (["0"-"7"])*
            |
             ["1"-"9"] (["0"-"9"])*
            |
             ("0x" | "0X") (["0"-"9","a"-"f","A"-"F"])+
            |
             "u" (["0"-"9","a"-"f","A"-"F"])+
           )
     )
   )*
   "\"" >
| <  STRING : "\""
   ( ( ~["\"","\\","\n","\r"])
   | ("\\" (
             ["n","t","v","b","r","f","a","\\","?","'","\""]
            |
             "0" (["0"-"7"])*
            |
             ["1"-"9"] (["0"-"9"])*
            |
             ("0x" | "0X") (["0"-"9","a"-"f","A"-"F"])+
           )
     )
   )*
   "\"" >
}
