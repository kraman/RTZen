/**
  * File: Preprocessor.jj
  * Author: LuisM Pena, luismpena@gmx.net
  * Last update: 0.30, 1st July 2003
  * Please visit http://grasia.fdi.ucm.es/~luismi/idldepend for
  *   updates, download, license and copyright information
  **/

options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(Preprocessor)

package idldepend.javacc.generated;

import idldepend.javacc.Prepreprocessor;
import idldepend.javacc.PreprocessorInterface;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class Preprocessor {

  /**
   * AddedInfo is any number of new definition (or undefinitions) to be done
   */
  public Preprocessor(File file, String addedInfo, PreprocessorInterface controller)
      throws ParseException, IOException{
    this(new Prepreprocessor(file, controller, addedInfo));
    this.controller=controller;
  }

  private Preprocessor(Prepreprocessor prepreprocessor)
      throws ParseException, IOException{
    this(prepreprocessor.getFilteredInput());
    this.prepreprocessor=prepreprocessor;
  }

  public void parseInput() throws ParseException {
    while(parse())
      ;
  }

  public void stopParsing(){
    prepreprocessor.stopTask();
  }

  public int getReadLine() {
    return line;
  }

  public String getReadFile() {
    return file;
  }

  /**
   * line directive issued by the prepreprocessor
   */
  private void preplineDirective(String directive) throws ParseException{
    int space=directive.indexOf(' ',9);
    file=directive.substring(space+1);
    line=Integer.valueOf(directive.substring(9,space)).intValue();
    if (firstInclude) {
      firstInclude=false;
    }
    else {
      if (line==0) {
        controller.includingFile(file);
      }
      else {
        controller.fileIncluded();
      }
    }
    passLine(line, "\"" + file + "\"");
  }

  /**
   * line directive not issued by the prepreprocessor, just found on the
   * original file
   * @param withLine true if the directive starts with #line
   */
  private void lineDirective(boolean withLine,boolean withFile,String directive)
       throws ParseException {

    String toUse = directive.substring(withLine? 6 : 2).trim();
    int space=-1;
    if (withFile) {
      int startFile = toUse.indexOf('"');
      file=toUse.substring(startFile);
      space=toUse.indexOf(' ');
      int tab=toUse.indexOf('\t');
      if ((space==-1) || ((tab!=-1) && (tab<space))) {
        space=tab;
      }
    }
    if (space==-1) {
      line=Integer.valueOf(toUse).intValue();
    }
    else {
      line=Integer.valueOf(toUse.substring(0,space)).intValue();
    }
    passLine(line, file);
  }

  private void passLine(int number, String file)
        throws ParseException {

    StringBuffer buffer = new StringBuffer("#line ");
    buffer.append(number).append(' ').append(file);
    Token read = new Token();
    read.image=buffer.toString();
    read.kind=OTHER;
    controller.readToken(read);
  }

  PreprocessorInterface controller;
  Prepreprocessor prepreprocessor;
  int line;
  String file="preprocessor";
  boolean firstInclude=true;
  static Token prEOL = new Token();
  static Token prPragma = new Token();
  static{
    prEOL.kind=EOL;
    prEOL.image="\n";
    prPragma.image="#pragma";
    prPragma.kind=OTHER;
  }
}

PARSER_END(Preprocessor)

SKIP :
{
     <"\r">
}

TOKEN :
{
   <PREPLINE : "////line " (~["\n","\r"])*>
 | <LINE     : "//line" (<SPACE>)* (["0"-"9"])+ (<SPACE>)* <STRING>  (<SPACE>)*>
 | <LINE2    : "//line" (<SPACE>)* (["0"-"9"])+ (<SPACE>)*>
 | <DEFINE   : "//define">
 | <UNDEF    : "//undef">
 | <IFDEF    : "//ifdef">
 | <IFNDEF   : "//ifndef">
 | <IF       : "//if">
 | <ENDIF    : "//endif">
 | <ELSE     : "//else">
 | <ELIF     : "//elif">
 | <ERROR    : "//error">
 | <PRAGMA   : "//pragma">
 | <INCLUDEQ : "//canIncludeFile">
 | <LINE3    : "//" (<SPACE>)* (["0"-"9"])+ (<SPACE>)* <STRING>  (<SPACE>)*>
 | <LINE4    : "//" (<SPACE>)* (["0"-"9"])+ (<SPACE>)*>
 | <UNKNOWN  : "//">
 | <EOL      : "\n">
 | <LEFTPAR  : "(">
 | <RIGHTPAR : ")">
 | <COMMA    : ",">
 | <SPECIAL  : ("##" | "#")>
 | <STRING   : "\"" ("\\\"" | ~["\""])* "\"" >
 | <CHAR     : "\'" ("\\\'" | ~["\'"])* "\'" >
 | <SPACE    : (" " | "\t") >
 | <ID       : ["a"-"z","A"-"Z","_"] (["a"-"z","A"-"Z","0"-"9","_"])*>
 | <OTHER    : (["\000"-"\377"])>
}

boolean parse() :
{
  boolean ret=true;
}
{
  {
    line++;
  }
   (
       preprocessorLine()
     | ret=normalLine()
   )
   {controller.readToken(prEOL);
    return ret;}
}

void preprocessorLine() :
{
}
{
     preplineLine()
   | lineLine()
   | lineWithoutFileLine()
   | lineWithoutLineLine()
   | lineWithoutLineWithoutFileLine()
   | defineLine()
   | undefLine()
   | ifDefLine()
   | ifNdefLine()
   | ifLine()
   | endifLine()
   | elseLine()
   | elifLine()
  | questionOnIncludeLine()
   | errorLine()
   | pragmaLine() 
   | unknownLine()
}

void questionOnIncludeLine():
{
}
{
   <INCLUDEQ> endOfLine() {--line;controller.verifyFileInclusion();}
}

void endifLine() :
{
}
{
   <ENDIF> endOfLine() {controller.alternateEvaluationLevel(true);}
}

void elseLine() :
{
}
{
   <ELSE> endOfLine() {controller.alternateEvaluationLevel(false);}
}

void ifLine() :
{
}
{
   <IF>
   {controller.startEvaluation(false);}
   readTokensInLine()
   {controller.completeEvaluation(false);}
}

void elifLine() :
{
}
{
   <ELIF>
   {controller.startEvaluation(true);}
   readTokensInLine()
   {controller.completeEvaluation(true);}
}

void ifDefLine() :
{
   String id;
}
{
   <IFDEF> id=readId() {controller.simpleEvaluation(id,true);}
}

void ifNdefLine() :
{
   String id;
}
{
   <IFNDEF> id=readId() {controller.simpleEvaluation(id,false);}
}

void preplineLine() :
{
  Token t;
}
{
   t=<PREPLINE>
   { preplineDirective(t.toString()); }
}

void lineLine() :
{
  Token t;
}
{
   t=<LINE>
   {lineDirective(true, true, t.toString()); }
}

void lineWithoutFileLine() :
{
  Token t;
}
{
   t=<LINE2>
   { lineDirective(true, false, t.toString()); }
}

void lineWithoutLineLine() :
{
  Token t;
}
{
   t=<LINE3>
   { lineDirective(false, true, t.toString()); }
}

void lineWithoutLineWithoutFileLine() :
{
  Token t;
}
{
   t=<LINE4>
   { lineDirective(false, false, t.toString()); }
}

void pragmaLine() :
{
}
{
   <PRAGMA>
   {controller.readToken(prPragma);}
   readTokensInLine()
}

void unknownLine() :
{
}
{
   <UNKNOWN>
   {controller.storeTokens(true);}
   readTokensInLine()
   {controller.storeTokens(false);
    controller.unknownDirective();}
}

void errorLine() :
{
   Token token;
}
{
   token=<ERROR>
   {controller.storeTokens(true);}
   readTokensInLine()
   {controller.storeTokens(false);
    controller.errorDirective();}
}

void undefLine() :
{
   String id;
}
{
   <UNDEF> id=readId() {controller.undefineMacro(id);}
}

void defineLine() :
{
  Token def;
}
{
  <DEFINE> (<SPACE>)+ def=<ID> (LOOKAHEAD(1) complexMacro(def)|simpleMacro(def))
}

void complexMacro(Token def) :
{
  List params=new ArrayList();
}
{
  <LEFTPAR> [macroParameters(params)] <RIGHTPAR>
    { controller.defineMacro(def.toString(), params); }
  readTokensInLine()
    { controller.macroDefined(); }
}

void simpleMacro(Token def) :
{
}
{
  {controller.defineMacro(def.toString());}
  readTokensInLine()
  { controller.macroDefined(); }
}

void macroParameters(List in) :
{
   Token t;
}
{
   ( (<SPACE>)* t=<ID> (<SPACE>)*{in.add(t);}
      (<COMMA>
         ( (<SPACE>)* t=<ID> (<SPACE>)* {in.add(t);} )
      )*
   )
}

boolean normalLine() :
{
  boolean ret=true;
}
{
  (
     <EOL>
   | <EOF> {ret=false;}
   | readToken() ret=readTokensInLine()
  )
  {return ret;}
}

String readId() :
{
Token token;
}
{
  (<SPACE>)* token=<ID> endOfLine() {return token.toString();}
}

boolean readTokensInLine() :
{
  boolean ret=true;
}
{
  (
     <EOL>
   | <EOF> {ret=false;}
   | readToken() ret=readTokensInLine()
  )
  {return ret;}
}

void readToken() :
{
   Token t;
}
{
   (
     t=<ID>
   | t=<STRING>
   | t=<LEFTPAR>
   | t=<COMMA>
   | t=<RIGHTPAR>
   | t=<SPECIAL>
   | t=<SPACE>
   | t=<CHAR>
   | t=<OTHER>
   )
   {controller.readToken(t);}
}

void endOfLine() :
{
}
{
  (<SPACE>)* (<EOF>|<EOL>)
}

