/* Generated By:JavaCC: Do not edit this line. IDLParser.java */
package idldepend.javacc.generated;

import idldepend.idl.IDLToJavaMapping;
import idldepend.javacc.LocatedParseException;

import java.io.Reader;
import java.util.HashMap;

/**
 * Changes on the jj file included with the JavaCC 2.1 distribution,
 * to reflect the changes on CORBA 2.3.
 * Note that this parser receives content already preprocessed, where
 * every comment has been removed.
 * Line information is received through lines with the following format:
 * #line number file
 * It accepts as well lines #pragma, but it discards all of them but #pragma prefix
 */
public class IDLParser implements IDLParserConstants {

  public IDLParser(Reader reader, IDLToJavaMapping mapper) {
    this(reader);
    this.mapper=mapper;
  }

  public void parse() throws ParseException{
    addParser(token_source, this);
    try {
      specification();
    }
    catch(ParseException ex) {
      if (lineFile==null) {
        throw ex;
      }
      else {
        int lineError =token.next.beginLine+lineLine-line-1;
        throw new LocatedParseException(ex, lineFile, lineError);
      }
    }
    finally{
      removeParser(token_source);
    }
  }

  final static private int PRIMITIVE = 0;
  final static private int SEQUENCE = 1;
  final static private int NO_PRIMITIVE = 2;
  final static private int NO_TYPEDEF = 3;

  /**
   * It is needed to keep track of the right line and file being parsed.
   */
  public void lineDirective(String directive, int thoughtLine) {
    line=thoughtLine;
    int space=directive.indexOf(" ",6);
    lineLine=Integer.valueOf(directive.substring(6,space)).intValue();
    lineFile=directive.substring(space+1);
    mapper.prefixPragma((String) prefixes.get(lineFile));
  }

  public void linePragma(String directive) {
    String withoutPragma = directive.substring(7).trim();
    if (withoutPragma.startsWith("prefix")) {
      String prefix=withoutPragma.substring(6).trim();
      int length=prefix.length();
      if (length>1 && prefix.charAt(0)=='"' && prefix.charAt(length-1)=='"') {
        prefix=prefix.substring(1,length-1);
      }
      else {
        prefix=null;
      }
      prefixes.put(lineFile, prefix);
      mapper.prefixPragma(prefix);
    }
  }

  private IDLToJavaMapping mapper;
  private HashMap prefixes = new HashMap();
  private int line;
  private int lineLine;    //information extracted from #line directives
  private String lineFile; //information extracted from #line directives

  /**
   * Following variables/methods are required to map
   * IDLParserTokenManagers and IDLParsers, which is needed
   * if static generation is not used on the JavaCC generation.
   * (The IDLParserTokenManager needs to communicate to the
   * IDLParser on #line and #pragma directives, but the
   * IDLParserTokenManager has no knowledge on the IDLParser to
   * use!
   */
  static private HashMap IDLParsers = new HashMap();
  static IDLParser getParser(IDLParserTokenManager m )
    {return (IDLParser) IDLParsers.get(m);}
  static void addParser(IDLParserTokenManager m, IDLParser parser)
    {IDLParsers.put(m, parser);}
  static void removeParser(IDLParserTokenManager m)
    {IDLParsers.remove(m);}

/* Production 1. Changed from definition+ to definition* !!! */
/* This production must be changed to support "import" */
  final public void specification() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 8:
      case 11:
      case 12:
      case 13:
      case 14:
      case 18:
      case 19:
      case 28:
      case 43:
      case 44:
      case 56:
      case 57:
      case 61:
      case 71:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      definition();
    }
    jj_consume_token(0);
  }

/* Production 2 */
/* Thi sproduction must change to support type_id, type_prefix, event, component, home_decl */
  final public void definition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 43:
    case 44:
    case 56:
    case 57:
    case 61:
      type_dcl();
      jj_consume_token(7);
      break;
    case 28:
      const_dcl();
      jj_consume_token(7);
      break;
    case 71:
      except_dcl();
      jj_consume_token(7);
      break;
    default:
      jj_la1[1] = jj_gen;
      if (jj_2_1(2)) {
        interfacex();
        jj_consume_token(7);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 8:
          module();
          jj_consume_token(7);
          break;
        case 11:
        case 18:
        case 19:
          value();
          jj_consume_token(7);
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

/* Production 3 */
  final public void module() throws ParseException {
  String name;
    jj_consume_token(8);
    name = identifier();
       mapper.enteredScope(name,true);
    jj_consume_token(9);
    label_2:
    while (true) {
      definition();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 8:
      case 11:
      case 12:
      case 13:
      case 14:
      case 18:
      case 19:
      case 28:
      case 43:
      case 44:
      case 56:
      case 57:
      case 61:
      case 71:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
    }
    jj_consume_token(10);
       mapper.exitedScope();
  }

/* Production 4 */
  final public void interfacex() throws ParseException {
    if (jj_2_2(4)) {
      interface_dcl();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 11:
      case 12:
      case 13:
        forward_dcl();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/* Production 5 */
  final public void interface_dcl() throws ParseException {
  String name;
    name = interface_header();
                               mapper.enteredScope(name,false);
    jj_consume_token(9);
    interface_body();
    jj_consume_token(10);
                               mapper.exitedScope();
  }

/* Production 6 */
/* Changed to support local interfaces */
  final public void forward_dcl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 11:
    case 12:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 11:
        jj_consume_token(11);
        break;
      case 12:
        jj_consume_token(12);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(13);
    identifier();
  }

/* Production 7 */
/* Changed to support local interfaces */
/* Changed to support pseudo interfaces */
  final public String interface_header() throws ParseException {
  String name;
  boolean abst=false, local=false, pseudo=false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 11:
    case 12:
    case 14:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 11:
        jj_consume_token(11);
                 abst=true;
        break;
      case 12:
        jj_consume_token(12);
                                        local=true;
        break;
      case 14:
        jj_consume_token(14);
                                                                 pseudo=true;
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(13);
    name = identifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
      inheritance_spec();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
      if (pseudo) mapper.mapPseudoInterface(name);
      else mapper.mapInterface(name, abst, local);
      {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

/* Production 8 */
  final public void interface_body() throws ParseException {
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 28:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 61:
      case 65:
      case 66:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 79:
      case ID:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_3;
      }
      export();
    }
  }

/* Production 9 */
/* Production 9 must change to support type_id & type_prefix */
  final public void export() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 43:
    case 44:
    case 56:
    case 57:
    case 61:
      type_dcl();
      jj_consume_token(7);
      break;
    case 28:
      const_dcl();
      jj_consume_token(7);
      break;
    case 71:
      except_dcl();
      jj_consume_token(7);
      break;
    case 69:
    case 70:
      attr_dcl();
      jj_consume_token(7);
      break;
    case 17:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 65:
    case 66:
    case 72:
    case 73:
    case 79:
    case ID:
      op_dcl();
      jj_consume_token(7);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* Production 10 */
  final public void inheritance_spec() throws ParseException {
    jj_consume_token(15);
    interface_name();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      jj_consume_token(16);
      interface_name();
    }
  }

/* Production 11 */
  final public void interface_name() throws ParseException {
    scoped_name();
  }

/* Production 12 */
  final public void scoped_name() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    identifier();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
      jj_consume_token(17);
      identifier();
    }
  }

/* Production 13 */
  final public void value() throws ParseException {
    if (jj_2_3(3)) {
      value_dcl();
    } else if (jj_2_4(3)) {
      value_abs_dcl();
    } else if (jj_2_5(3)) {
      value_box_dcl();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 11:
      case 18:
        value_forward_dcl();
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/* Production 14 */
  final public void value_forward_dcl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 11:
      jj_consume_token(11);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    jj_consume_token(18);
    identifier();
  }

/* Production 15 */
  final public void value_box_dcl() throws ParseException {
  String name;
  int type;
    jj_consume_token(18);
    name = identifier();
    type = type_spec();
   mapper.mapValuebox(name, type==PRIMITIVE);
  }

/* Production 16 */
  final public void value_abs_dcl() throws ParseException {
  String name;
    jj_consume_token(11);
    jj_consume_token(18);
    name = identifier();
    value_inheritance_spec();
    mapper.mapValuetype(name, false);
    mapper.enteredScope(name, false);
    jj_consume_token(9);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 28:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 61:
      case 65:
      case 66:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 79:
      case ID:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_6;
      }
      export();
    }
    jj_consume_token(10);
    mapper.exitedScope();
  }

/* Production 17 */
  final public void value_dcl() throws ParseException {
  String name;
  boolean withFactory=false, thisOne;
    name = value_header();
    mapper.enteredScope(name, false);
    jj_consume_token(9);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 22:
      case 23:
      case 24:
      case 28:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 61:
      case 65:
      case 66:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 79:
      case ID:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_7;
      }
      thisOne = value_element();
                                withFactory|=thisOne;
    }
    jj_consume_token(10);
    mapper.exitedScope();
    mapper.mapValuetype(name, withFactory);
  }

/* Production 18 */
  final public String value_header() throws ParseException {
  String name;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 19:
      jj_consume_token(19);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    jj_consume_token(18);
    name = identifier();
    value_inheritance_spec();
    {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

/* Production 19 */
  final public void value_inheritance_spec() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
      jj_consume_token(15);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 20:
        jj_consume_token(20);
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      value_name();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 16:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_8;
        }
        jj_consume_token(16);
        value_name();
      }
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 21:
      jj_consume_token(21);
      interface_name();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 16:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_9;
        }
        jj_consume_token(16);
        interface_name();
      }
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
  }

/* Production 20 */
  final public void value_name() throws ParseException {
    scoped_name();
  }

/* Production 21 : returns true if it includes a factory*/
  final public boolean value_element() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
    case 28:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 61:
    case 65:
    case 66:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 79:
    case ID:
      export();
                    {if (true) return false;}
      break;
    case 22:
    case 23:
      state_member();
                    {if (true) return false;}
      break;
    case 24:
      init_dcl();
                    {if (true) return true;}
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* Production 22 */
  final public void state_member() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 22:
      jj_consume_token(22);
      break;
    case 23:
      jj_consume_token(23);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    type_spec();
    declarators(NO_TYPEDEF);
    jj_consume_token(7);
  }

/* Production 23 */
/* must change to support [<raises_expr>] */
  final public void init_dcl() throws ParseException {
    jj_consume_token(24);
    identifier();
    jj_consume_token(25);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 27:
      init_param_decls();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    jj_consume_token(26);
    jj_consume_token(7);
  }

/* Production 24 */
  final public void init_param_decls() throws ParseException {
    init_param_decl();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_10;
      }
      jj_consume_token(16);
      init_param_decl();
    }
  }

/* Production 25 */
  final public void init_param_decl() throws ParseException {
    init_param_attribute();
    param_type_spec();
    simple_declarator();
  }

/* Production 26 */
  final public void init_param_attribute() throws ParseException {
    jj_consume_token(27);
  }

/* Production 27 */
  final public void const_dcl() throws ParseException {
  String name;
    jj_consume_token(28);
    const_type();
    name = identifier();
    jj_consume_token(29);
    const_exp();
                                                          mapper.mapConst(name);
  }

/* Production 28 */
  final public void const_type() throws ParseException {
    if (jj_2_6(2)) {
      integer_type();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
        char_type();
        break;
      case 51:
        wide_char_type();
        break;
      case 52:
        boolean_type();
        break;
      case 45:
      case 46:
      case 47:
        floating_pt_type();
        break;
      case 65:
        string_type();
        break;
      case 66:
        wide_string_type();
        break;
      case 78:
        fixed_pt_const_type();
        break;
      case 17:
      case ID:
        scoped_name();
        break;
      case 53:
        octet_type();
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/* Production 29 */
  final public void const_exp() throws ParseException {
    or_expr();
  }

/* Production 30 */
  final public void or_expr() throws ParseException {
    xor_expr();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 30:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_11;
      }
      jj_consume_token(30);
      xor_expr();
    }
  }

/* Production 31 */
  final public void xor_expr() throws ParseException {
    and_expr();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 31:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_12;
      }
      jj_consume_token(31);
      and_expr();
    }
  }

/* Production 32 */
  final public void and_expr() throws ParseException {
    shift_expr();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 32:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_13;
      }
      jj_consume_token(32);
      shift_expr();
    }
  }

/* Production 33 */
  final public void shift_expr() throws ParseException {
    add_expr();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 33:
      case 34:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 33:
        jj_consume_token(33);
        break;
      case 34:
        jj_consume_token(34);
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      add_expr();
    }
  }

/* Production 34 */
  final public void add_expr() throws ParseException {
    mult_expr();
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 35:
      case 36:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_15;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 35:
        jj_consume_token(35);
        break;
      case 36:
        jj_consume_token(36);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      mult_expr();
    }
  }

/* Production 35 */
  final public void mult_expr() throws ParseException {
    unary_expr();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 37:
      case 38:
      case 39:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_16;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 37:
        jj_consume_token(37);
        break;
      case 38:
        jj_consume_token(38);
        break;
      case 39:
        jj_consume_token(39);
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      unary_expr();
    }
  }

/* Production 36 */
  final public void unary_expr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 35:
    case 36:
    case 40:
      unary_operator();
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    primary_expr();
  }

/* Production 37 */
  final public void unary_operator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 36:
      jj_consume_token(36);
      break;
    case 35:
      jj_consume_token(35);
      break;
    case 40:
      jj_consume_token(40);
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* Production 38 */
  final public void primary_expr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
    case ID:
      scoped_name();
      break;
    case 41:
    case 42:
    case OCTALINT:
    case DECIMALINT:
    case HEXADECIMALINT:
    case FIXED:
    case FLOATONE:
    case FLOATTWO:
    case WCHARACTER:
    case CHARACTER:
    case WSTRING:
    case STRING:
      literal();
      break;
    case 25:
      jj_consume_token(25);
      const_exp();
      jj_consume_token(26);
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* Production 39 */
  final public void literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OCTALINT:
    case DECIMALINT:
    case HEXADECIMALINT:
      integer_literal();
      break;
    case STRING:
      string_literal();
      break;
    case WSTRING:
      wide_string_literal();
      break;
    case CHARACTER:
      character_literal();
      break;
    case WCHARACTER:
      wide_character_literal();
      break;
    case FIXED:
      fixed_pt_literal();
      break;
    case FLOATONE:
    case FLOATTWO:
      floating_pt_literal();
      break;
    case 41:
    case 42:
      boolean_literal();
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* Production 40 */
  final public void boolean_literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 41:
      jj_consume_token(41);
      break;
    case 42:
      jj_consume_token(42);
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* Production 41 */
  final public void positive_int_const() throws ParseException {
    const_exp();
  }

/* Production 42 */
/* This production must change to support constr_forward_decl */
  final public void type_dcl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 43:
      jj_consume_token(43);
      type_declarator();
      break;
    case 56:
      struct_type();
      break;
    case 57:
      union_type();
      break;
    case 61:
      enum_type();
      break;
    case 44:
      jj_consume_token(44);
      simple_declarator();
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* Production 43 */
  final public void type_declarator() throws ParseException {
  int type;
    type = type_spec();
    declarators(type);
  }

/* Production 44 */
  final public int type_spec() throws ParseException {
  int ret;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 62:
    case 65:
    case 66:
    case 78:
    case 79:
    case ID:
      ret = simple_type_spec();
                          {if (true) return ret;}
      break;
    case 56:
    case 57:
    case 61:
      constr_type_spec();
                          {if (true) return NO_PRIMITIVE;}
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* Production 45 */
  final public int simple_type_spec() throws ParseException {
  int ret;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 79:
      ret = base_type_spec();
                             {if (true) return ret;}
      break;
    case 62:
    case 65:
    case 66:
    case 78:
      ret = template_type_spec();
                             {if (true) return ret;}
      break;
    case 17:
    case ID:
      scoped_name();
                             {if (true) return NO_PRIMITIVE;}
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* Production 46 */
  final public int base_type_spec() throws ParseException {
    if (jj_2_7(2)) {
      floating_pt_type();
                      {if (true) return PRIMITIVE;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 47:
      case 48:
      case 49:
        integer_type();
                      {if (true) return PRIMITIVE;}
        break;
      case 50:
        char_type();
                      {if (true) return PRIMITIVE;}
        break;
      case 51:
        wide_char_type();
                      {if (true) return PRIMITIVE;}
        break;
      case 52:
        boolean_type();
                      {if (true) return PRIMITIVE;}
        break;
      case 53:
        octet_type();
                      {if (true) return PRIMITIVE;}
        break;
      case 54:
        any_type();
                      {if (true) return NO_PRIMITIVE;}
        break;
      case 55:
        object_type();
                      {if (true) return NO_PRIMITIVE;}
        break;
      case 79:
        value_base_type();
                      {if (true) return NO_PRIMITIVE;}
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

/* Production 47 */
  final public int template_type_spec() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 62:
      sequence_type();
                      {if (true) return SEQUENCE;}
      break;
    case 65:
      string_type();
                      {if (true) return NO_PRIMITIVE;}
      break;
    case 66:
      wide_string_type();
                      {if (true) return NO_PRIMITIVE;}
      break;
    case 78:
      fixed_pt_type();
                      {if (true) return NO_PRIMITIVE;}
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* Production 48 */
  final public void constr_type_spec() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 56:
      struct_type();
      break;
    case 57:
      union_type();
      break;
    case 61:
      enum_type();
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* Production 49 */
  final public void declarators(int type) throws ParseException {
    declarator(type);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
        ;
        break;
      default:
        jj_la1[50] = jj_gen;
        break label_17;
      }
      jj_consume_token(16);
      declarator(type);
    }
  }

/* Production 50 */
  final public void declarator(int type) throws ParseException {
  String name;
    if (jj_2_8(2)) {
      name = complex_declarator();
       if (type!=NO_TYPEDEF) mapper.mapTypedef(name,true);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        name = simple_declarator();
       if (type!=NO_TYPEDEF) mapper.mapTypedef(name,type==SEQUENCE);
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/* Production 51 */
  final public String simple_declarator() throws ParseException {
  String ret;
    ret = identifier();
                    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

/* Production 52 */
  final public String complex_declarator() throws ParseException {
  String name;
    name = array_declarator();
                           {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

/* Production 53 */
  final public void floating_pt_type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 45:
      jj_consume_token(45);
      break;
    case 46:
      jj_consume_token(46);
      break;
    case 47:
      jj_consume_token(47);
      jj_consume_token(46);
      break;
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* Production 54 */
  final public void integer_type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 47:
    case 48:
      signed_int();
      break;
    case 49:
      unsigned_int();
      break;
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* Production 55 */
  final public void signed_int() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 48:
      signed_short_int();
      break;
    default:
      jj_la1[54] = jj_gen;
      if (jj_2_9(2)) {
        signed_longlong_int();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 47:
          signed_long_int();
          break;
        default:
          jj_la1[55] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

/* Production 56 */
  final public void signed_short_int() throws ParseException {
    jj_consume_token(48);
  }

/* Production 57 */
  final public void signed_long_int() throws ParseException {
    jj_consume_token(47);
  }

/* Production 58 */
  final public void signed_longlong_int() throws ParseException {
    jj_consume_token(47);
    jj_consume_token(47);
  }

/* Production 59 */
  final public void unsigned_int() throws ParseException {
    if (jj_2_10(2)) {
      unsigned_short_int();
    } else if (jj_2_11(3)) {
      unsigned_longlong_int();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 49:
        unsigned_long_int();
        break;
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/* Production 60 */
  final public void unsigned_short_int() throws ParseException {
    jj_consume_token(49);
    jj_consume_token(48);
  }

/* Production 61 */
  final public void unsigned_long_int() throws ParseException {
    jj_consume_token(49);
    jj_consume_token(47);
  }

/* Production 62 */
  final public void unsigned_longlong_int() throws ParseException {
    jj_consume_token(49);
    jj_consume_token(47);
    jj_consume_token(47);
  }

/* Production 63 */
  final public void char_type() throws ParseException {
    jj_consume_token(50);
  }

/* Production 64 */
  final public void wide_char_type() throws ParseException {
    jj_consume_token(51);
  }

/* Production 65 */
  final public void boolean_type() throws ParseException {
    jj_consume_token(52);
  }

/* Production 66 */
  final public void octet_type() throws ParseException {
    jj_consume_token(53);
  }

/* Production 67 */
  final public void any_type() throws ParseException {
    jj_consume_token(54);
  }

/* Production 68 */
  final public void object_type() throws ParseException {
    jj_consume_token(55);
  }

/* Production 69 */
  final public void struct_type() throws ParseException {
  String name;
    jj_consume_token(56);
    name = identifier();
    jj_consume_token(9);
    member_list();
    jj_consume_token(10);
                                                    mapper.mapStruct(name);
  }

/* Production 70 */
  final public void member_list() throws ParseException {
    label_18:
    while (true) {
      member();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 61:
      case 62:
      case 65:
      case 66:
      case 78:
      case 79:
      case ID:
        ;
        break;
      default:
        jj_la1[57] = jj_gen;
        break label_18;
      }
    }
  }

/* Production 71 */
  final public void member() throws ParseException {
    type_spec();
    declarators(NO_TYPEDEF);
    jj_consume_token(7);
  }

/* Production 72 */
  final public void union_type() throws ParseException {
  String name;
    jj_consume_token(57);
    name = identifier();
    jj_consume_token(58);
    jj_consume_token(25);
    switch_type_spec();
    jj_consume_token(26);
    jj_consume_token(9);
    switch_body();
    jj_consume_token(10);
    mapper.mapUnion(name);
  }

/* Production 73 */
  final public void switch_type_spec() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 47:
    case 48:
    case 49:
      integer_type();
      break;
    case 50:
      char_type();
      break;
    case 52:
      boolean_type();
      break;
    case 61:
      enum_type();
      break;
    case 17:
    case ID:
      scoped_name();
      break;
    default:
      jj_la1[58] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* Production 74 */
  final public void switch_body() throws ParseException {
    label_19:
    while (true) {
      casex();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 59:
      case 60:
        ;
        break;
      default:
        jj_la1[59] = jj_gen;
        break label_19;
      }
    }
  }

/* Production 75 */
  final public void casex() throws ParseException {
    label_20:
    while (true) {
      case_label();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 59:
      case 60:
        ;
        break;
      default:
        jj_la1[60] = jj_gen;
        break label_20;
      }
    }
    element_spec();
    jj_consume_token(7);
  }

/* Production 76 */
  final public void case_label() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 59:
      jj_consume_token(59);
      const_exp();
      jj_consume_token(15);
      break;
    case 60:
      jj_consume_token(60);
      jj_consume_token(15);
      break;
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* Production 77 */
  final public void element_spec() throws ParseException {
    type_spec();
    declarator(NO_TYPEDEF);
  }

/* Production 78 */
  final public void enum_type() throws ParseException {
  String name;
    jj_consume_token(61);
    name = identifier();
    jj_consume_token(9);
    enumerator();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
        ;
        break;
      default:
        jj_la1[62] = jj_gen;
        break label_21;
      }
      jj_consume_token(16);
      enumerator();
    }
    jj_consume_token(10);
   mapper.mapEnum(name);
  }

/* Production 79 */
  final public void enumerator() throws ParseException {
    identifier();
  }

/* Production 80 */
  final public void sequence_type() throws ParseException {
    jj_consume_token(62);
    jj_consume_token(63);
    simple_type_spec();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 16:
      jj_consume_token(16);
      positive_int_const();
      break;
    default:
      jj_la1[63] = jj_gen;
      ;
    }
    jj_consume_token(64);
  }

/* Production 81 */
  final public void string_type() throws ParseException {
    jj_consume_token(65);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 63:
      jj_consume_token(63);
      positive_int_const();
      jj_consume_token(64);
      break;
    default:
      jj_la1[64] = jj_gen;
      ;
    }
  }

/* Production 82 */
  final public void wide_string_type() throws ParseException {
    jj_consume_token(66);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 63:
      jj_consume_token(63);
      positive_int_const();
      jj_consume_token(64);
      break;
    default:
      jj_la1[65] = jj_gen;
      ;
    }
  }

/* Production 83 */
  final public String array_declarator() throws ParseException {
  String name;
    name = identifier();
    label_22:
    while (true) {
      fixed_array_size();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 67:
        ;
        break;
      default:
        jj_la1[66] = jj_gen;
        break label_22;
      }
    }
                                             {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

/* Production 84 */
  final public void fixed_array_size() throws ParseException {
    jj_consume_token(67);
    positive_int_const();
    jj_consume_token(68);
  }

/* Production 85 */
/* Production 85 must change to support attribute access exceptions */
  final public void attr_dcl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 69:
      jj_consume_token(69);
      break;
    default:
      jj_la1[67] = jj_gen;
      ;
    }
    jj_consume_token(70);
    param_type_spec();
    simple_declarator();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
        ;
        break;
      default:
        jj_la1[68] = jj_gen;
        break label_23;
      }
      jj_consume_token(16);
      simple_declarator();
    }
  }

/* Production 86 */
  final public void except_dcl() throws ParseException {
  String name;
    jj_consume_token(71);
    name = identifier();
    jj_consume_token(9);
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 17:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 61:
      case 62:
      case 65:
      case 66:
      case 78:
      case 79:
      case ID:
        ;
        break;
      default:
        jj_la1[69] = jj_gen;
        break label_24;
      }
      member();
    }
    jj_consume_token(10);
                                                       mapper.mapException(name);
  }

/* Production 87 */
  final public void op_dcl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 72:
      op_attribute();
      break;
    default:
      jj_la1[70] = jj_gen;
      ;
    }
    op_type_spec();
    identifier();
    parameter_dcls();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 76:
      raises_expr();
      break;
    default:
      jj_la1[71] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 77:
      context_expr();
      break;
    default:
      jj_la1[72] = jj_gen;
      ;
    }
  }

/* Production 88 */
  final public void op_attribute() throws ParseException {
    jj_consume_token(72);
  }

/* Production 89 */
  final public void op_type_spec() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 65:
    case 66:
    case 79:
    case ID:
      param_type_spec();
      break;
    case 73:
      jj_consume_token(73);
      break;
    default:
      jj_la1[73] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* Production 90 */
  final public void parameter_dcls() throws ParseException {
    jj_consume_token(25);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 27:
    case 74:
    case 75:
      param_dcl();
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 16:
          ;
          break;
        default:
          jj_la1[74] = jj_gen;
          break label_25;
        }
        jj_consume_token(16);
        param_dcl();
      }
      break;
    default:
      jj_la1[75] = jj_gen;
      ;
    }
    jj_consume_token(26);
  }

/* Production 91 */
  final public void param_dcl() throws ParseException {
    param_attribute();
    param_type_spec();
    simple_declarator();
  }

/* Production 92 */
  final public void param_attribute() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 27:
      jj_consume_token(27);
      break;
    case 74:
      jj_consume_token(74);
      break;
    case 75:
      jj_consume_token(75);
      break;
    default:
      jj_la1[76] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* Production 93 */
  final public void raises_expr() throws ParseException {
    jj_consume_token(76);
    jj_consume_token(25);
    scoped_name();
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
        ;
        break;
      default:
        jj_la1[77] = jj_gen;
        break label_26;
      }
      jj_consume_token(16);
      scoped_name();
    }
    jj_consume_token(26);
  }

/* Production 94 */
  final public void context_expr() throws ParseException {
    jj_consume_token(77);
    jj_consume_token(25);
    string_literal();
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 16:
        ;
        break;
      default:
        jj_la1[78] = jj_gen;
        break label_27;
      }
      jj_consume_token(16);
      string_literal();
    }
    jj_consume_token(26);
  }

/* Production 95 */
  final public void param_type_spec() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 79:
      base_type_spec();
      break;
    case 65:
      string_type();
      break;
    case 66:
      wide_string_type();
      break;
    case 17:
    case ID:
      scoped_name();
      break;
    default:
      jj_la1[79] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* Production 96 */
  final public void fixed_pt_type() throws ParseException {
    jj_consume_token(78);
    jj_consume_token(63);
    positive_int_const();
    jj_consume_token(16);
    positive_int_const();
    jj_consume_token(64);
  }

/* Production 97 */
  final public void fixed_pt_const_type() throws ParseException {
    jj_consume_token(78);
  }

/* Production 98 */
  final public void value_base_type() throws ParseException {
    jj_consume_token(79);
  }

/************************** END OF GRAMMAR PRODUCTIONS *******************************/

/* Definitions of complex regular expressions follow */
  final public String identifier() throws ParseException {
  Token token;
    token = jj_consume_token(ID);
              {if (true) return token.toString();}
    throw new Error("Missing return statement in function");
  }

  final public void integer_literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OCTALINT:
      jj_consume_token(OCTALINT);
      break;
    case DECIMALINT:
      jj_consume_token(DECIMALINT);
      break;
    case HEXADECIMALINT:
      jj_consume_token(HEXADECIMALINT);
      break;
    default:
      jj_la1[80] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void string_literal() throws ParseException {
    jj_consume_token(STRING);
  }

  final public void wide_string_literal() throws ParseException {
    jj_consume_token(WSTRING);
  }

  final public void character_literal() throws ParseException {
    jj_consume_token(CHARACTER);
  }

  final public void wide_character_literal() throws ParseException {
    jj_consume_token(WCHARACTER);
  }

  final public void floating_pt_literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FLOATONE:
      jj_consume_token(FLOATONE);
      break;
    case FLOATTWO:
      jj_consume_token(FLOATTWO);
      break;
    default:
      jj_la1[81] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void fixed_pt_literal() throws ParseException {
    jj_consume_token(FIXED);
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(19)) jj_scanpos = xsp;
    if (jj_scan_token(18)) return true;
    if (jj_3R_43()) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_scan_token(57)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_28()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_35()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_3R_42()) return true;
    if (jj_scan_token(9)) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_scan_token(56)) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_3R_118()) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) return true;
    }
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_scan_token(11)) return true;
    if (jj_scan_token(18)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_3R_117()) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_3R_116()) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_scan_token(18)) return true;
    if (jj_3R_43()) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(72)) jj_scanpos = xsp;
    if (jj_3R_100()) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_3R_115()) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_3R_114()) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(71)) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_scan_token(79)) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_scan_token(55)) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(54)) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_scan_token(53)) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_scan_token(52)) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(69)) jj_scanpos = xsp;
    if (jj_scan_token(70)) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_scan_token(51)) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_32()) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_scan_token(50)) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_31()) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_30()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_scan_token(67)) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_scan_token(49)) return true;
    if (jj_scan_token(47)) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_3R_43()) return true;
    Token xsp;
    if (jj_3R_58()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_58()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(17)) jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_scan_token(14)) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(49)) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_scan_token(66)) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_scan_token(28)) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_3R_67()) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_scan_token(49)) return true;
    if (jj_scan_token(48)) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_scan_token(15)) return true;
    if (jj_3R_71()) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_scan_token(65)) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_3R_83()) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_3R_89()) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_scan_token(62)) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_scan_token(12)) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_3R_85()) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_scan_token(44)) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_3R_94()) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(47)) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_3R_93()) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_52()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(43)) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_scan_token(61)) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_scan_token(11)) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) jj_scanpos = xsp;
    if (jj_scan_token(13)) return true;
    if (jj_3R_43()) return true;
    xsp = jj_scanpos;
    if (jj_3R_51()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) return true;
    }
    return false;
  }

  final private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) jj_scanpos = xsp;
    if (jj_scan_token(13)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_scan_token(78)) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_3R_84()) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_3R_40()) return true;
    if (jj_scan_token(9)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(10)) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_3R_116()) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_3R_115()) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_scan_token(47)) return true;
    if (jj_scan_token(46)) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_scan_token(21)) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_scan_token(15)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_29()) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    return false;
  }

  final private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_3R_48()) return true;
    return false;
  }

  public IDLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[82];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x100c7900,0x10000000,0xc0900,0x100c7900,0x3800,0x1800,0x1800,0x5800,0x5800,0x8000,0x10020000,0x10020000,0x10000,0x20000,0x20000,0x40800,0x800,0x10020000,0x11c20000,0x80000,0x100000,0x10000,0x8000,0x10000,0x200000,0x11c20000,0xc00000,0x8000000,0x10000,0x20000,0x40000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2020000,0x0,0x0,0x0,0x20000,0x20000,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x20000,0x20000,0x0,0x0,0x0,0x10000,0x10000,0x0,0x0,0x0,0x0,0x10000,0x20000,0x0,0x0,0x0,0x20000,0x10000,0x8000000,0x8000000,0x10000,0x10000,0x20000,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x23001800,0x23001800,0x0,0x23001800,0x0,0x0,0x0,0x0,0x0,0x0,0x23fff800,0x23fff800,0x0,0x0,0x0,0x0,0x0,0x23fff800,0x23fff800,0x0,0x0,0x0,0x0,0x0,0x0,0x23fff800,0x0,0x0,0x0,0x3ce000,0x0,0x0,0x1,0x6,0x6,0x18,0x18,0xe0,0xe0,0x118,0x118,0x600,0x600,0x600,0x23001800,0x63ffe000,0x40ffe000,0xff8000,0x40000000,0x23000000,0x0,0x0,0xe000,0x38000,0x10000,0x8000,0x20000,0x63ffe000,0x20178000,0x18000000,0x18000000,0x18000000,0x0,0x0,0x80000000,0x80000000,0x0,0x0,0x0,0x63ffe000,0x0,0x0,0x0,0xffe000,0x0,0x0,0x0,0x0,0x0,0xffe000,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x80,0x80,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x183e6,0x183e6,0x0,0x0,0x0,0x0,0x0,0x183e6,0x183e6,0x0,0x0,0x0,0x0,0x0,0x0,0x183e6,0x0,0x0,0x0,0x14006,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7ff0000,0x7fe0000,0x0,0x0,0x1c006,0x1c006,0x8000,0x4006,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x1c006,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x20,0x0,0x1c006,0x100,0x1000,0x2000,0x18206,0x0,0xc00,0xc00,0x0,0x0,0x18006,0xe0000,0x600000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[11];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public IDLParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new IDLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 82; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 82; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public IDLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new IDLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 82; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 82; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public IDLParser(IDLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 82; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(IDLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 82; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[91];
    for (int i = 0; i < 91; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 82; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 91; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 11; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
