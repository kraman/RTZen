<!-- $Id: configure.xml,v 1.1 2003/10/16 22:06:40 kraman Exp $ -->

<!--+
    |
    | This file contains the ZEN XML configuration script. ZEN uses ANT
    | as its building tool. Some useful properties are defined at configuration
    | time. These properties are used to keep all the build files clear and 
    | self-documenting.
    |
    |
    | File: configure.xml
    | Author: Angelo Corsaro <corsaro@doc.ece.uci.edu>
    | Author: Krishna Raman
    | Revision: $Revision: 1.1 $ $Date: 2003/10/16 22:06:40 $
    |
    |
    | NOTE: Some part of this file is "mis-indented" on purpose
    |       so that the generated configuration files have the 
    |       proper indentation.
    +-->

<project name="Config" default="all" basedir=".">

    <property file="zen-build.properties"/>
    <target name="init">
        <path id="zen.os.base">
           <pathelement location="${basedir}"/>
        </path>
    
        <pathconvert targetos="unix" property="new.zen.basedir" refid="zen.os.base"/>
        <property name="config-file" value="zen-build-bootstrap.properties"/>
        
        <condition property="zen.rtbootclasspath" value="${timesys_ri_install}/lib/foundation.jar">
            <equals arg1="${zen.build.runtime}" arg2="timesys_ri"/>
        </condition>

        <condition property="zen.rtbootclasspath" value="${jRate_install}/classes/:${jRate_classpath}">
            <equals arg1="${zen.build.runtime}" arg2="jRate"/>
        </condition>
        <condition property="zen.jRateLibDir" value="${jRate_install}/lib/">
            <equals arg1="${zen.build.runtime}" arg2="jRate"/>
        </condition>
        <condition property="compiler_jRate">
            <equals arg1="${zen.build.runtime}" arg2="jRate"/>
        </condition>

        <condition property="zen.rtbootclasspath" value="${OVM_install}/src/syslib/user/ovm_rt_user.jar">
            <equals arg1="${zen.build.runtime}" arg2="OVM"/>
        </condition>       

        <property name="zen.win.exec" value="zen.bat"/>
        <property name="idl.win.exec" value="idlc.bat"/>
        <property name="zen.unix.exec" value="zen.sh"/>
        <property name="idl.unix.exec" value="idlc.sh"/>
        <property name="zen.properties" value="zen.properties"/>
        <property name="naming.win.exec" value="naming.bat"/>
        <property name="naming.unix.exec" value="naming.sh"/>
        <property name="zen.classdir" value="${new.zen.basedir}/classes"/>
        <property file="zen-build.properties"/>
        
        <!-- Make sure we always use the unix-style path separator, even in windows. -->
        <path id="class.path">
          <pathelement location="${java.class.path}"/>
        </path>

        <pathconvert dirsep="/" property="new.java.class.path" refid="class.path">
        </pathconvert>
        
        <property name="zen.classpath" value="${zen.rtbootclasspath}${path.separator}${zen.classdir}${path.separator}${new.java.class.path}"/>
    
        <property
            name="zen.jvm.properties"
            value="-Xbootclasspath/p:${zen.classpath} -Dorg.omg.CORBA.ORBClass=edu.uci.ece.zen.orb.ORB -Dorg.omg.CORBA.ORBSingletonClass=edu.uci.ece.zen.orb.ORBSingleton"/>  
    </target>

    <target name="all" depends="init, createConfigFile, body-zen, body-openorb, createDirectories, createScripts"/>

    <target name="createConfigFile">
       <echo file="${config-file}">
########################################################
#   DO NOT MANUALLY CHANGE THE CONTENTS OF THIS FILE   #
#   THIS FILE WAS AUTOMATICALLY GENERATED BY THE ZEN   #
#   CONFIGURATION SCRIPT (configure.xml)               #
########################################################

#
# Set the property needed to build ZEN
#
zen.basedir = ${new.zen.basedir}
zen.srcdir = ${new.zen.basedir}/packages
zen.bindir = ${new.zen.basedir}/bin
zen.gendir = ${new.zen.basedir}/packages/generated
zen.classdir = ${zen.classdir}
zen.libdir = ${new.zen.basedir}/lib
zen.testdir = ${new.zen.basedir}/packages/tests
zen.classpath = ${zen.classpath}
zen.win.exec = zen.bat
idl.win.exec = idlc.bat
zen.unix.exec = zen.sh
idl.unix.exec = idlc.sh
naming.win.exec = naming.bat
naming.unix.exec = naming.sh

#
# Some Handy Settings for Emacs/XEmacs Users
#
build.compiler.emacs = false

#
# Set Paranoia-Level warnings!!!
#
build.compiler.pedantic = false

#
# System properties for the Java Virtual Machine.
# Generally necessary for most programs that require Zen.  
#
zen.jvm.properties = ${zen.jvm.properties}

       </echo>
   </target>

   
   <target name="body-openorb" if="openorb.idl.compiler">
        <echo  file="${config-file}" append="yes">
#########################
# IDL Compiler Selected #
#########################
openorb.gendir = ${zen.srcdir}/openorb-generated
idl2java.compiler = org.openorb.compiler.IdlCompiler
openorb.idl.compiler
idl.flag=-d
openorb.basedir = ${new.zen.basedir}/OpenORB-1.3.1
openorb.idl.dir = ${openorb.basedir}/idl
openorb.class.path = ${zen.classpath}${path.separator}${openorb.basedir}/lib/avalon-framework.jar${path.separator}${openorb.basedir}/lib/excalibur-configuration.jar${path.separator}${openorb.basedir}/lib/junit.jar${path.separator}${openorb.basedir}/lib/logkit.jar${path.separator}${openorb.basedir}/lib/openorb-1.3.1.jar${path.separator}${openorb.basedir}/lib/openorb_tools-1.3.1.jar${path.separator}${openorb.basedir}/lib/xerces.jar
classpath = ${openorb.class.path}
        </echo>
    </target>

    
    <target name="body-zen" if="zen.idl.compiler">
        <echo  file="${config-file}" append="yes">
##########################
# IDL Compiler Selected  #
##########################

idl2java.compiler = edu.uci.ece.zen.xidl.Idl
zen.idl.compiler
idl.flag=-o
classpath = ${zen.classpath}
        </echo>
    </target>


   <property name="args" value="$"/>

   <target name="createDirectories">
      <mkdir dir="${new.zen.basedir}/classes"/>
      <mkdir dir="${new.zen.basedir}/lib"/>
   </target>

   <!--+
       | This target generates the zen.bat and zen.sh needed to run
       | zen, on the different platforms.
       |
       +-->
      <target name="createScripts">
      <property file="zen-build-bootstrap.properties"/>
      <echo file="bin/${zen.win.exec}">
@echo off
java -Xbootclasspath:${new.zen.basedir}/lib/omg.jar;${new.zen.basedir}/lib/zen.jar;${java.home}/lib/rt.jar ${zen.jvm.properties} %*
      </echo>

      <echo file="bin/${idl.win.exec}">
@echo off
java -Xbootclasspath:${new.zen.basedir}/lib/omg.jar;${new.zen.basedir}/lib/zen.jar;${java.home}/lib/rt.jar;${classpath} ${zen.jvm.properties} ${idl2java.compiler} %*
      </echo>

      <echo file="bin/${zen.unix.exec}">
#!/bin/sh
java -Xbootclasspath:${new.zen.basedir}/lib/omg.jar:${new.zen.basedir}/lib/zen.jar:${java.home}/lib/rt.jar:${java.class.path} ${zen.jvm.properties} $@
      </echo>
      
      <echo file="bin/${naming.win.exec}">
#!/bin/sh
java -Xbootclasspath:${new.zen.basedir}/lib/naming.jar;${new.zen.basedir}/lib/concurrent.jar;new.zen.basedir}/lib/omg.jar;${new.zen.basedir}/lib/zen.jar;${java.home}/lib/rt.jar;${java.class.path} ${zen.jvm.properties} edu.uci.ece.zen.naming.NamingService
      </echo>

      <!--      <echo file="bin/${idl.unix.exec}">
#!/bin/sh
java -Xbootclasspath:${new.zen.basedir}/lib/concurrent.jar:${new.zen.basedir}/lib/omg.jar:${new.zen.basedir}/lib/zen.jar:${java.home}/lib/rt.jar:${java.class.path} ${zen.jvm.properties} ${idl2java.compiler} $@
      </echo> -->

      <echo file="bin/${idl.unix.exec}">
#!/bin/sh
java -Xbootclasspath:${new.zen.basedir}/lib/omg.jar:${new.zen.basedir}/lib/zen.jar:${java.home}/lib/rt.jar:${classpath} ${zen.jvm.properties} ${idl2java.compiler} $@
      </echo>

      <echo file="bin/${naming.unix.exec}">
#!/bin/sh
java -Xbootclasspath:${new.zen.basedir}/lib/concurrent.jar:${new.zen.basedir}/lib/naming.jar:${new.zen.basedir}/lib/omg.jar:${new.zen.basedir}/lib/zen.jar:${java.home}/lib/rt.jar:${java.class.path} ${zen.jvm.properties} edu.uci.ece.zen.naming.NamingService
      </echo>
   </target>
</project>
